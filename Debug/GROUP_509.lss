
GROUP_509.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002628  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002628  000026bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000030  00800168  00800168  000027c4  2**0
                  ALLOC
  3 .stab         00003a20  00000000  00000000  000027c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b98  00000000  00000000  000061e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00007d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d4  00000000  00000000  00007efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000218c  00000000  00000000  000080d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000122c  00000000  00000000  0000a25c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001103  00000000  00000000  0000b488  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000c58c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ee  00000000  00000000  0000c72c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000932  00000000  00000000  0000ca1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d34c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 04 0a 	jmp	0x1408	; 0x1408 <__vector_1>
       8:	0c 94 2b 0a 	jmp	0x1456	; 0x1456 <__vector_2>
       c:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 ae 08 	jmp	0x115c	; 0x115c <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 5f 08 	jmp	0x10be	; 0x10be <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a8 39       	cpi	r26, 0x98	; 152
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e8 e2       	ldi	r30, 0x28	; 40
      78:	f6 e2       	ldi	r31, 0x26	; 38
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <main>
      8a:	0c 94 12 13 	jmp	0x2624	; 0x2624 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 25 04 	call	0x84a	; 0x84a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 25 04 	call	0x84a	; 0x84a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 03 13 	jmp	0x2606	; 0x2606 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 03 13 	jmp	0x2606	; 0x2606 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 03 13 	jmp	0x2606	; 0x2606 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 03 13 	jmp	0x2606	; 0x2606 <__epilogue_restores__+0x18>

0000084a <__fixsfsi>:
     84a:	ac e0       	ldi	r26, 0x0C	; 12
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__prologue_saves__+0x20>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	ce 01       	movw	r24, r28
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	be 01       	movw	r22, r28
     864:	6b 5f       	subi	r22, 0xFB	; 251
     866:	7f 4f       	sbci	r23, 0xFF	; 255
     868:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     86c:	8d 81       	ldd	r24, Y+5	; 0x05
     86e:	82 30       	cpi	r24, 0x02	; 2
     870:	61 f1       	breq	.+88     	; 0x8ca <__stack+0x6b>
     872:	82 30       	cpi	r24, 0x02	; 2
     874:	50 f1       	brcs	.+84     	; 0x8ca <__stack+0x6b>
     876:	84 30       	cpi	r24, 0x04	; 4
     878:	21 f4       	brne	.+8      	; 0x882 <__stack+0x23>
     87a:	8e 81       	ldd	r24, Y+6	; 0x06
     87c:	88 23       	and	r24, r24
     87e:	51 f1       	breq	.+84     	; 0x8d4 <__stack+0x75>
     880:	2e c0       	rjmp	.+92     	; 0x8de <__stack+0x7f>
     882:	2f 81       	ldd	r18, Y+7	; 0x07
     884:	38 85       	ldd	r19, Y+8	; 0x08
     886:	37 fd       	sbrc	r19, 7
     888:	20 c0       	rjmp	.+64     	; 0x8ca <__stack+0x6b>
     88a:	6e 81       	ldd	r22, Y+6	; 0x06
     88c:	2f 31       	cpi	r18, 0x1F	; 31
     88e:	31 05       	cpc	r19, r1
     890:	1c f0       	brlt	.+6      	; 0x898 <__stack+0x39>
     892:	66 23       	and	r22, r22
     894:	f9 f0       	breq	.+62     	; 0x8d4 <__stack+0x75>
     896:	23 c0       	rjmp	.+70     	; 0x8de <__stack+0x7f>
     898:	8e e1       	ldi	r24, 0x1E	; 30
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	82 1b       	sub	r24, r18
     89e:	93 0b       	sbc	r25, r19
     8a0:	29 85       	ldd	r18, Y+9	; 0x09
     8a2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8a4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8a6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <__stack+0x53>
     8aa:	56 95       	lsr	r21
     8ac:	47 95       	ror	r20
     8ae:	37 95       	ror	r19
     8b0:	27 95       	ror	r18
     8b2:	8a 95       	dec	r24
     8b4:	d2 f7       	brpl	.-12     	; 0x8aa <__stack+0x4b>
     8b6:	66 23       	and	r22, r22
     8b8:	b1 f0       	breq	.+44     	; 0x8e6 <__stack+0x87>
     8ba:	50 95       	com	r21
     8bc:	40 95       	com	r20
     8be:	30 95       	com	r19
     8c0:	21 95       	neg	r18
     8c2:	3f 4f       	sbci	r19, 0xFF	; 255
     8c4:	4f 4f       	sbci	r20, 0xFF	; 255
     8c6:	5f 4f       	sbci	r21, 0xFF	; 255
     8c8:	0e c0       	rjmp	.+28     	; 0x8e6 <__stack+0x87>
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	09 c0       	rjmp	.+18     	; 0x8e6 <__stack+0x87>
     8d4:	2f ef       	ldi	r18, 0xFF	; 255
     8d6:	3f ef       	ldi	r19, 0xFF	; 255
     8d8:	4f ef       	ldi	r20, 0xFF	; 255
     8da:	5f e7       	ldi	r21, 0x7F	; 127
     8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <__stack+0x87>
     8de:	20 e0       	ldi	r18, 0x00	; 0
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	40 e0       	ldi	r20, 0x00	; 0
     8e4:	50 e8       	ldi	r21, 0x80	; 128
     8e6:	b9 01       	movw	r22, r18
     8e8:	ca 01       	movw	r24, r20
     8ea:	2c 96       	adiw	r28, 0x0c	; 12
     8ec:	e2 e0       	ldi	r30, 0x02	; 2
     8ee:	0c 94 07 13 	jmp	0x260e	; 0x260e <__epilogue_restores__+0x20>

000008f2 <__floatunsisf>:
     8f2:	a8 e0       	ldi	r26, 0x08	; 8
     8f4:	b0 e0       	ldi	r27, 0x00	; 0
     8f6:	ef e7       	ldi	r30, 0x7F	; 127
     8f8:	f4 e0       	ldi	r31, 0x04	; 4
     8fa:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__prologue_saves__+0x10>
     8fe:	7b 01       	movw	r14, r22
     900:	8c 01       	movw	r16, r24
     902:	61 15       	cp	r22, r1
     904:	71 05       	cpc	r23, r1
     906:	81 05       	cpc	r24, r1
     908:	91 05       	cpc	r25, r1
     90a:	19 f4       	brne	.+6      	; 0x912 <__floatunsisf+0x20>
     90c:	82 e0       	ldi	r24, 0x02	; 2
     90e:	89 83       	std	Y+1, r24	; 0x01
     910:	60 c0       	rjmp	.+192    	; 0x9d2 <__floatunsisf+0xe0>
     912:	83 e0       	ldi	r24, 0x03	; 3
     914:	89 83       	std	Y+1, r24	; 0x01
     916:	8e e1       	ldi	r24, 0x1E	; 30
     918:	c8 2e       	mov	r12, r24
     91a:	d1 2c       	mov	r13, r1
     91c:	dc 82       	std	Y+4, r13	; 0x04
     91e:	cb 82       	std	Y+3, r12	; 0x03
     920:	ed 82       	std	Y+5, r14	; 0x05
     922:	fe 82       	std	Y+6, r15	; 0x06
     924:	0f 83       	std	Y+7, r16	; 0x07
     926:	18 87       	std	Y+8, r17	; 0x08
     928:	c8 01       	movw	r24, r16
     92a:	b7 01       	movw	r22, r14
     92c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__clzsi2>
     930:	fc 01       	movw	r30, r24
     932:	31 97       	sbiw	r30, 0x01	; 1
     934:	f7 ff       	sbrs	r31, 7
     936:	3b c0       	rjmp	.+118    	; 0x9ae <__floatunsisf+0xbc>
     938:	22 27       	eor	r18, r18
     93a:	33 27       	eor	r19, r19
     93c:	2e 1b       	sub	r18, r30
     93e:	3f 0b       	sbc	r19, r31
     940:	57 01       	movw	r10, r14
     942:	68 01       	movw	r12, r16
     944:	02 2e       	mov	r0, r18
     946:	04 c0       	rjmp	.+8      	; 0x950 <__floatunsisf+0x5e>
     948:	d6 94       	lsr	r13
     94a:	c7 94       	ror	r12
     94c:	b7 94       	ror	r11
     94e:	a7 94       	ror	r10
     950:	0a 94       	dec	r0
     952:	d2 f7       	brpl	.-12     	; 0x948 <__floatunsisf+0x56>
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	a0 e0       	ldi	r26, 0x00	; 0
     962:	b0 e0       	ldi	r27, 0x00	; 0
     964:	04 c0       	rjmp	.+8      	; 0x96e <__floatunsisf+0x7c>
     966:	88 0f       	add	r24, r24
     968:	99 1f       	adc	r25, r25
     96a:	aa 1f       	adc	r26, r26
     96c:	bb 1f       	adc	r27, r27
     96e:	2a 95       	dec	r18
     970:	d2 f7       	brpl	.-12     	; 0x966 <__floatunsisf+0x74>
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	a1 09       	sbc	r26, r1
     976:	b1 09       	sbc	r27, r1
     978:	8e 21       	and	r24, r14
     97a:	9f 21       	and	r25, r15
     97c:	a0 23       	and	r26, r16
     97e:	b1 23       	and	r27, r17
     980:	00 97       	sbiw	r24, 0x00	; 0
     982:	a1 05       	cpc	r26, r1
     984:	b1 05       	cpc	r27, r1
     986:	21 f0       	breq	.+8      	; 0x990 <__floatunsisf+0x9e>
     988:	41 e0       	ldi	r20, 0x01	; 1
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	60 e0       	ldi	r22, 0x00	; 0
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	4a 29       	or	r20, r10
     992:	5b 29       	or	r21, r11
     994:	6c 29       	or	r22, r12
     996:	7d 29       	or	r23, r13
     998:	4d 83       	std	Y+5, r20	; 0x05
     99a:	5e 83       	std	Y+6, r21	; 0x06
     99c:	6f 83       	std	Y+7, r22	; 0x07
     99e:	78 87       	std	Y+8, r23	; 0x08
     9a0:	8e e1       	ldi	r24, 0x1E	; 30
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	8e 1b       	sub	r24, r30
     9a6:	9f 0b       	sbc	r25, r31
     9a8:	9c 83       	std	Y+4, r25	; 0x04
     9aa:	8b 83       	std	Y+3, r24	; 0x03
     9ac:	12 c0       	rjmp	.+36     	; 0x9d2 <__floatunsisf+0xe0>
     9ae:	30 97       	sbiw	r30, 0x00	; 0
     9b0:	81 f0       	breq	.+32     	; 0x9d2 <__floatunsisf+0xe0>
     9b2:	0e 2e       	mov	r0, r30
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0xcc>
     9b6:	ee 0c       	add	r14, r14
     9b8:	ff 1c       	adc	r15, r15
     9ba:	00 1f       	adc	r16, r16
     9bc:	11 1f       	adc	r17, r17
     9be:	0a 94       	dec	r0
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0xc4>
     9c2:	ed 82       	std	Y+5, r14	; 0x05
     9c4:	fe 82       	std	Y+6, r15	; 0x06
     9c6:	0f 83       	std	Y+7, r16	; 0x07
     9c8:	18 87       	std	Y+8, r17	; 0x08
     9ca:	ce 1a       	sub	r12, r30
     9cc:	df 0a       	sbc	r13, r31
     9ce:	dc 82       	std	Y+4, r13	; 0x04
     9d0:	cb 82       	std	Y+3, r12	; 0x03
     9d2:	1a 82       	std	Y+2, r1	; 0x02
     9d4:	ce 01       	movw	r24, r28
     9d6:	01 96       	adiw	r24, 0x01	; 1
     9d8:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     9dc:	28 96       	adiw	r28, 0x08	; 8
     9de:	ea e0       	ldi	r30, 0x0A	; 10
     9e0:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <__epilogue_restores__+0x10>

000009e4 <__clzsi2>:
     9e4:	ef 92       	push	r14
     9e6:	ff 92       	push	r15
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	7b 01       	movw	r14, r22
     9ee:	8c 01       	movw	r16, r24
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	e8 16       	cp	r14, r24
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	f8 06       	cpc	r15, r24
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	08 07       	cpc	r16, r24
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	18 07       	cpc	r17, r24
     a00:	88 f4       	brcc	.+34     	; 0xa24 <__clzsi2+0x40>
     a02:	8f ef       	ldi	r24, 0xFF	; 255
     a04:	e8 16       	cp	r14, r24
     a06:	f1 04       	cpc	r15, r1
     a08:	01 05       	cpc	r16, r1
     a0a:	11 05       	cpc	r17, r1
     a0c:	31 f0       	breq	.+12     	; 0xa1a <__clzsi2+0x36>
     a0e:	28 f0       	brcs	.+10     	; 0xa1a <__clzsi2+0x36>
     a10:	88 e0       	ldi	r24, 0x08	; 8
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	a0 e0       	ldi	r26, 0x00	; 0
     a16:	b0 e0       	ldi	r27, 0x00	; 0
     a18:	17 c0       	rjmp	.+46     	; 0xa48 <__clzsi2+0x64>
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	a0 e0       	ldi	r26, 0x00	; 0
     a20:	b0 e0       	ldi	r27, 0x00	; 0
     a22:	12 c0       	rjmp	.+36     	; 0xa48 <__clzsi2+0x64>
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	e8 16       	cp	r14, r24
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	f8 06       	cpc	r15, r24
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	08 07       	cpc	r16, r24
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	18 07       	cpc	r17, r24
     a34:	28 f0       	brcs	.+10     	; 0xa40 <__clzsi2+0x5c>
     a36:	88 e1       	ldi	r24, 0x18	; 24
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	a0 e0       	ldi	r26, 0x00	; 0
     a3c:	b0 e0       	ldi	r27, 0x00	; 0
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__clzsi2+0x64>
     a40:	80 e1       	ldi	r24, 0x10	; 16
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	20 e2       	ldi	r18, 0x20	; 32
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	40 e0       	ldi	r20, 0x00	; 0
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	28 1b       	sub	r18, r24
     a52:	39 0b       	sbc	r19, r25
     a54:	4a 0b       	sbc	r20, r26
     a56:	5b 0b       	sbc	r21, r27
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__clzsi2+0x7e>
     a5a:	16 95       	lsr	r17
     a5c:	07 95       	ror	r16
     a5e:	f7 94       	ror	r15
     a60:	e7 94       	ror	r14
     a62:	8a 95       	dec	r24
     a64:	d2 f7       	brpl	.-12     	; 0xa5a <__clzsi2+0x76>
     a66:	f7 01       	movw	r30, r14
     a68:	e8 59       	subi	r30, 0x98	; 152
     a6a:	ff 4f       	sbci	r31, 0xFF	; 255
     a6c:	80 81       	ld	r24, Z
     a6e:	28 1b       	sub	r18, r24
     a70:	31 09       	sbc	r19, r1
     a72:	41 09       	sbc	r20, r1
     a74:	51 09       	sbc	r21, r1
     a76:	c9 01       	movw	r24, r18
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	ff 90       	pop	r15
     a7e:	ef 90       	pop	r14
     a80:	08 95       	ret

00000a82 <__pack_f>:
     a82:	df 92       	push	r13
     a84:	ef 92       	push	r14
     a86:	ff 92       	push	r15
     a88:	0f 93       	push	r16
     a8a:	1f 93       	push	r17
     a8c:	fc 01       	movw	r30, r24
     a8e:	e4 80       	ldd	r14, Z+4	; 0x04
     a90:	f5 80       	ldd	r15, Z+5	; 0x05
     a92:	06 81       	ldd	r16, Z+6	; 0x06
     a94:	17 81       	ldd	r17, Z+7	; 0x07
     a96:	d1 80       	ldd	r13, Z+1	; 0x01
     a98:	80 81       	ld	r24, Z
     a9a:	82 30       	cpi	r24, 0x02	; 2
     a9c:	48 f4       	brcc	.+18     	; 0xab0 <__pack_f+0x2e>
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	a0 e1       	ldi	r26, 0x10	; 16
     aa4:	b0 e0       	ldi	r27, 0x00	; 0
     aa6:	e8 2a       	or	r14, r24
     aa8:	f9 2a       	or	r15, r25
     aaa:	0a 2b       	or	r16, r26
     aac:	1b 2b       	or	r17, r27
     aae:	a5 c0       	rjmp	.+330    	; 0xbfa <__pack_f+0x178>
     ab0:	84 30       	cpi	r24, 0x04	; 4
     ab2:	09 f4       	brne	.+2      	; 0xab6 <__pack_f+0x34>
     ab4:	9f c0       	rjmp	.+318    	; 0xbf4 <__pack_f+0x172>
     ab6:	82 30       	cpi	r24, 0x02	; 2
     ab8:	21 f4       	brne	.+8      	; 0xac2 <__pack_f+0x40>
     aba:	ee 24       	eor	r14, r14
     abc:	ff 24       	eor	r15, r15
     abe:	87 01       	movw	r16, r14
     ac0:	05 c0       	rjmp	.+10     	; 0xacc <__pack_f+0x4a>
     ac2:	e1 14       	cp	r14, r1
     ac4:	f1 04       	cpc	r15, r1
     ac6:	01 05       	cpc	r16, r1
     ac8:	11 05       	cpc	r17, r1
     aca:	19 f4       	brne	.+6      	; 0xad2 <__pack_f+0x50>
     acc:	e0 e0       	ldi	r30, 0x00	; 0
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	96 c0       	rjmp	.+300    	; 0xbfe <__pack_f+0x17c>
     ad2:	62 81       	ldd	r22, Z+2	; 0x02
     ad4:	73 81       	ldd	r23, Z+3	; 0x03
     ad6:	9f ef       	ldi	r25, 0xFF	; 255
     ad8:	62 38       	cpi	r22, 0x82	; 130
     ada:	79 07       	cpc	r23, r25
     adc:	0c f0       	brlt	.+2      	; 0xae0 <__pack_f+0x5e>
     ade:	5b c0       	rjmp	.+182    	; 0xb96 <__pack_f+0x114>
     ae0:	22 e8       	ldi	r18, 0x82	; 130
     ae2:	3f ef       	ldi	r19, 0xFF	; 255
     ae4:	26 1b       	sub	r18, r22
     ae6:	37 0b       	sbc	r19, r23
     ae8:	2a 31       	cpi	r18, 0x1A	; 26
     aea:	31 05       	cpc	r19, r1
     aec:	2c f0       	brlt	.+10     	; 0xaf8 <__pack_f+0x76>
     aee:	20 e0       	ldi	r18, 0x00	; 0
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	40 e0       	ldi	r20, 0x00	; 0
     af4:	50 e0       	ldi	r21, 0x00	; 0
     af6:	2a c0       	rjmp	.+84     	; 0xb4c <__pack_f+0xca>
     af8:	b8 01       	movw	r22, r16
     afa:	a7 01       	movw	r20, r14
     afc:	02 2e       	mov	r0, r18
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__pack_f+0x86>
     b00:	76 95       	lsr	r23
     b02:	67 95       	ror	r22
     b04:	57 95       	ror	r21
     b06:	47 95       	ror	r20
     b08:	0a 94       	dec	r0
     b0a:	d2 f7       	brpl	.-12     	; 0xb00 <__pack_f+0x7e>
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	a0 e0       	ldi	r26, 0x00	; 0
     b12:	b0 e0       	ldi	r27, 0x00	; 0
     b14:	04 c0       	rjmp	.+8      	; 0xb1e <__pack_f+0x9c>
     b16:	88 0f       	add	r24, r24
     b18:	99 1f       	adc	r25, r25
     b1a:	aa 1f       	adc	r26, r26
     b1c:	bb 1f       	adc	r27, r27
     b1e:	2a 95       	dec	r18
     b20:	d2 f7       	brpl	.-12     	; 0xb16 <__pack_f+0x94>
     b22:	01 97       	sbiw	r24, 0x01	; 1
     b24:	a1 09       	sbc	r26, r1
     b26:	b1 09       	sbc	r27, r1
     b28:	8e 21       	and	r24, r14
     b2a:	9f 21       	and	r25, r15
     b2c:	a0 23       	and	r26, r16
     b2e:	b1 23       	and	r27, r17
     b30:	00 97       	sbiw	r24, 0x00	; 0
     b32:	a1 05       	cpc	r26, r1
     b34:	b1 05       	cpc	r27, r1
     b36:	21 f0       	breq	.+8      	; 0xb40 <__pack_f+0xbe>
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	a0 e0       	ldi	r26, 0x00	; 0
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	9a 01       	movw	r18, r20
     b42:	ab 01       	movw	r20, r22
     b44:	28 2b       	or	r18, r24
     b46:	39 2b       	or	r19, r25
     b48:	4a 2b       	or	r20, r26
     b4a:	5b 2b       	or	r21, r27
     b4c:	da 01       	movw	r26, r20
     b4e:	c9 01       	movw	r24, r18
     b50:	8f 77       	andi	r24, 0x7F	; 127
     b52:	90 70       	andi	r25, 0x00	; 0
     b54:	a0 70       	andi	r26, 0x00	; 0
     b56:	b0 70       	andi	r27, 0x00	; 0
     b58:	80 34       	cpi	r24, 0x40	; 64
     b5a:	91 05       	cpc	r25, r1
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	39 f4       	brne	.+14     	; 0xb70 <__pack_f+0xee>
     b62:	27 ff       	sbrs	r18, 7
     b64:	09 c0       	rjmp	.+18     	; 0xb78 <__pack_f+0xf6>
     b66:	20 5c       	subi	r18, 0xC0	; 192
     b68:	3f 4f       	sbci	r19, 0xFF	; 255
     b6a:	4f 4f       	sbci	r20, 0xFF	; 255
     b6c:	5f 4f       	sbci	r21, 0xFF	; 255
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <__pack_f+0xf6>
     b70:	21 5c       	subi	r18, 0xC1	; 193
     b72:	3f 4f       	sbci	r19, 0xFF	; 255
     b74:	4f 4f       	sbci	r20, 0xFF	; 255
     b76:	5f 4f       	sbci	r21, 0xFF	; 255
     b78:	e0 e0       	ldi	r30, 0x00	; 0
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	a0 e0       	ldi	r26, 0x00	; 0
     b80:	3a 07       	cpc	r19, r26
     b82:	a0 e0       	ldi	r26, 0x00	; 0
     b84:	4a 07       	cpc	r20, r26
     b86:	a0 e4       	ldi	r26, 0x40	; 64
     b88:	5a 07       	cpc	r21, r26
     b8a:	10 f0       	brcs	.+4      	; 0xb90 <__pack_f+0x10e>
     b8c:	e1 e0       	ldi	r30, 0x01	; 1
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	79 01       	movw	r14, r18
     b92:	8a 01       	movw	r16, r20
     b94:	27 c0       	rjmp	.+78     	; 0xbe4 <__pack_f+0x162>
     b96:	60 38       	cpi	r22, 0x80	; 128
     b98:	71 05       	cpc	r23, r1
     b9a:	64 f5       	brge	.+88     	; 0xbf4 <__pack_f+0x172>
     b9c:	fb 01       	movw	r30, r22
     b9e:	e1 58       	subi	r30, 0x81	; 129
     ba0:	ff 4f       	sbci	r31, 0xFF	; 255
     ba2:	d8 01       	movw	r26, r16
     ba4:	c7 01       	movw	r24, r14
     ba6:	8f 77       	andi	r24, 0x7F	; 127
     ba8:	90 70       	andi	r25, 0x00	; 0
     baa:	a0 70       	andi	r26, 0x00	; 0
     bac:	b0 70       	andi	r27, 0x00	; 0
     bae:	80 34       	cpi	r24, 0x40	; 64
     bb0:	91 05       	cpc	r25, r1
     bb2:	a1 05       	cpc	r26, r1
     bb4:	b1 05       	cpc	r27, r1
     bb6:	39 f4       	brne	.+14     	; 0xbc6 <__pack_f+0x144>
     bb8:	e7 fe       	sbrs	r14, 7
     bba:	0d c0       	rjmp	.+26     	; 0xbd6 <__pack_f+0x154>
     bbc:	80 e4       	ldi	r24, 0x40	; 64
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	04 c0       	rjmp	.+8      	; 0xbce <__pack_f+0x14c>
     bc6:	8f e3       	ldi	r24, 0x3F	; 63
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	a0 e0       	ldi	r26, 0x00	; 0
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e8 0e       	add	r14, r24
     bd0:	f9 1e       	adc	r15, r25
     bd2:	0a 1f       	adc	r16, r26
     bd4:	1b 1f       	adc	r17, r27
     bd6:	17 ff       	sbrs	r17, 7
     bd8:	05 c0       	rjmp	.+10     	; 0xbe4 <__pack_f+0x162>
     bda:	16 95       	lsr	r17
     bdc:	07 95       	ror	r16
     bde:	f7 94       	ror	r15
     be0:	e7 94       	ror	r14
     be2:	31 96       	adiw	r30, 0x01	; 1
     be4:	87 e0       	ldi	r24, 0x07	; 7
     be6:	16 95       	lsr	r17
     be8:	07 95       	ror	r16
     bea:	f7 94       	ror	r15
     bec:	e7 94       	ror	r14
     bee:	8a 95       	dec	r24
     bf0:	d1 f7       	brne	.-12     	; 0xbe6 <__pack_f+0x164>
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <__pack_f+0x17c>
     bf4:	ee 24       	eor	r14, r14
     bf6:	ff 24       	eor	r15, r15
     bf8:	87 01       	movw	r16, r14
     bfa:	ef ef       	ldi	r30, 0xFF	; 255
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	6e 2f       	mov	r22, r30
     c00:	67 95       	ror	r22
     c02:	66 27       	eor	r22, r22
     c04:	67 95       	ror	r22
     c06:	90 2f       	mov	r25, r16
     c08:	9f 77       	andi	r25, 0x7F	; 127
     c0a:	d7 94       	ror	r13
     c0c:	dd 24       	eor	r13, r13
     c0e:	d7 94       	ror	r13
     c10:	8e 2f       	mov	r24, r30
     c12:	86 95       	lsr	r24
     c14:	49 2f       	mov	r20, r25
     c16:	46 2b       	or	r20, r22
     c18:	58 2f       	mov	r21, r24
     c1a:	5d 29       	or	r21, r13
     c1c:	b7 01       	movw	r22, r14
     c1e:	ca 01       	movw	r24, r20
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	ff 90       	pop	r15
     c26:	ef 90       	pop	r14
     c28:	df 90       	pop	r13
     c2a:	08 95       	ret

00000c2c <__unpack_f>:
     c2c:	fc 01       	movw	r30, r24
     c2e:	db 01       	movw	r26, r22
     c30:	40 81       	ld	r20, Z
     c32:	51 81       	ldd	r21, Z+1	; 0x01
     c34:	22 81       	ldd	r18, Z+2	; 0x02
     c36:	62 2f       	mov	r22, r18
     c38:	6f 77       	andi	r22, 0x7F	; 127
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	22 1f       	adc	r18, r18
     c3e:	22 27       	eor	r18, r18
     c40:	22 1f       	adc	r18, r18
     c42:	93 81       	ldd	r25, Z+3	; 0x03
     c44:	89 2f       	mov	r24, r25
     c46:	88 0f       	add	r24, r24
     c48:	82 2b       	or	r24, r18
     c4a:	28 2f       	mov	r18, r24
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	99 1f       	adc	r25, r25
     c50:	99 27       	eor	r25, r25
     c52:	99 1f       	adc	r25, r25
     c54:	11 96       	adiw	r26, 0x01	; 1
     c56:	9c 93       	st	X, r25
     c58:	11 97       	sbiw	r26, 0x01	; 1
     c5a:	21 15       	cp	r18, r1
     c5c:	31 05       	cpc	r19, r1
     c5e:	a9 f5       	brne	.+106    	; 0xcca <__unpack_f+0x9e>
     c60:	41 15       	cp	r20, r1
     c62:	51 05       	cpc	r21, r1
     c64:	61 05       	cpc	r22, r1
     c66:	71 05       	cpc	r23, r1
     c68:	11 f4       	brne	.+4      	; 0xc6e <__unpack_f+0x42>
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	37 c0       	rjmp	.+110    	; 0xcdc <__unpack_f+0xb0>
     c6e:	82 e8       	ldi	r24, 0x82	; 130
     c70:	9f ef       	ldi	r25, 0xFF	; 255
     c72:	13 96       	adiw	r26, 0x03	; 3
     c74:	9c 93       	st	X, r25
     c76:	8e 93       	st	-X, r24
     c78:	12 97       	sbiw	r26, 0x02	; 2
     c7a:	9a 01       	movw	r18, r20
     c7c:	ab 01       	movw	r20, r22
     c7e:	67 e0       	ldi	r22, 0x07	; 7
     c80:	22 0f       	add	r18, r18
     c82:	33 1f       	adc	r19, r19
     c84:	44 1f       	adc	r20, r20
     c86:	55 1f       	adc	r21, r21
     c88:	6a 95       	dec	r22
     c8a:	d1 f7       	brne	.-12     	; 0xc80 <__unpack_f+0x54>
     c8c:	83 e0       	ldi	r24, 0x03	; 3
     c8e:	8c 93       	st	X, r24
     c90:	0d c0       	rjmp	.+26     	; 0xcac <__unpack_f+0x80>
     c92:	22 0f       	add	r18, r18
     c94:	33 1f       	adc	r19, r19
     c96:	44 1f       	adc	r20, r20
     c98:	55 1f       	adc	r21, r21
     c9a:	12 96       	adiw	r26, 0x02	; 2
     c9c:	8d 91       	ld	r24, X+
     c9e:	9c 91       	ld	r25, X
     ca0:	13 97       	sbiw	r26, 0x03	; 3
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	13 96       	adiw	r26, 0x03	; 3
     ca6:	9c 93       	st	X, r25
     ca8:	8e 93       	st	-X, r24
     caa:	12 97       	sbiw	r26, 0x02	; 2
     cac:	20 30       	cpi	r18, 0x00	; 0
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	38 07       	cpc	r19, r24
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	48 07       	cpc	r20, r24
     cb6:	80 e4       	ldi	r24, 0x40	; 64
     cb8:	58 07       	cpc	r21, r24
     cba:	58 f3       	brcs	.-42     	; 0xc92 <__unpack_f+0x66>
     cbc:	14 96       	adiw	r26, 0x04	; 4
     cbe:	2d 93       	st	X+, r18
     cc0:	3d 93       	st	X+, r19
     cc2:	4d 93       	st	X+, r20
     cc4:	5c 93       	st	X, r21
     cc6:	17 97       	sbiw	r26, 0x07	; 7
     cc8:	08 95       	ret
     cca:	2f 3f       	cpi	r18, 0xFF	; 255
     ccc:	31 05       	cpc	r19, r1
     cce:	79 f4       	brne	.+30     	; 0xcee <__unpack_f+0xc2>
     cd0:	41 15       	cp	r20, r1
     cd2:	51 05       	cpc	r21, r1
     cd4:	61 05       	cpc	r22, r1
     cd6:	71 05       	cpc	r23, r1
     cd8:	19 f4       	brne	.+6      	; 0xce0 <__unpack_f+0xb4>
     cda:	84 e0       	ldi	r24, 0x04	; 4
     cdc:	8c 93       	st	X, r24
     cde:	08 95       	ret
     ce0:	64 ff       	sbrs	r22, 4
     ce2:	03 c0       	rjmp	.+6      	; 0xcea <__unpack_f+0xbe>
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	8c 93       	st	X, r24
     ce8:	12 c0       	rjmp	.+36     	; 0xd0e <__unpack_f+0xe2>
     cea:	1c 92       	st	X, r1
     cec:	10 c0       	rjmp	.+32     	; 0xd0e <__unpack_f+0xe2>
     cee:	2f 57       	subi	r18, 0x7F	; 127
     cf0:	30 40       	sbci	r19, 0x00	; 0
     cf2:	13 96       	adiw	r26, 0x03	; 3
     cf4:	3c 93       	st	X, r19
     cf6:	2e 93       	st	-X, r18
     cf8:	12 97       	sbiw	r26, 0x02	; 2
     cfa:	83 e0       	ldi	r24, 0x03	; 3
     cfc:	8c 93       	st	X, r24
     cfe:	87 e0       	ldi	r24, 0x07	; 7
     d00:	44 0f       	add	r20, r20
     d02:	55 1f       	adc	r21, r21
     d04:	66 1f       	adc	r22, r22
     d06:	77 1f       	adc	r23, r23
     d08:	8a 95       	dec	r24
     d0a:	d1 f7       	brne	.-12     	; 0xd00 <__unpack_f+0xd4>
     d0c:	70 64       	ori	r23, 0x40	; 64
     d0e:	14 96       	adiw	r26, 0x04	; 4
     d10:	4d 93       	st	X+, r20
     d12:	5d 93       	st	X+, r21
     d14:	6d 93       	st	X+, r22
     d16:	7c 93       	st	X, r23
     d18:	17 97       	sbiw	r26, 0x07	; 7
     d1a:	08 95       	ret

00000d1c <__fpcmp_parts_f>:
     d1c:	1f 93       	push	r17
     d1e:	dc 01       	movw	r26, r24
     d20:	fb 01       	movw	r30, r22
     d22:	9c 91       	ld	r25, X
     d24:	92 30       	cpi	r25, 0x02	; 2
     d26:	08 f4       	brcc	.+2      	; 0xd2a <__fpcmp_parts_f+0xe>
     d28:	47 c0       	rjmp	.+142    	; 0xdb8 <__fpcmp_parts_f+0x9c>
     d2a:	80 81       	ld	r24, Z
     d2c:	82 30       	cpi	r24, 0x02	; 2
     d2e:	08 f4       	brcc	.+2      	; 0xd32 <__fpcmp_parts_f+0x16>
     d30:	43 c0       	rjmp	.+134    	; 0xdb8 <__fpcmp_parts_f+0x9c>
     d32:	94 30       	cpi	r25, 0x04	; 4
     d34:	51 f4       	brne	.+20     	; 0xd4a <__fpcmp_parts_f+0x2e>
     d36:	11 96       	adiw	r26, 0x01	; 1
     d38:	1c 91       	ld	r17, X
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	99 f5       	brne	.+102    	; 0xda4 <__fpcmp_parts_f+0x88>
     d3e:	81 81       	ldd	r24, Z+1	; 0x01
     d40:	68 2f       	mov	r22, r24
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	61 1b       	sub	r22, r17
     d46:	71 09       	sbc	r23, r1
     d48:	3f c0       	rjmp	.+126    	; 0xdc8 <__fpcmp_parts_f+0xac>
     d4a:	84 30       	cpi	r24, 0x04	; 4
     d4c:	21 f0       	breq	.+8      	; 0xd56 <__fpcmp_parts_f+0x3a>
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	31 f4       	brne	.+12     	; 0xd5e <__fpcmp_parts_f+0x42>
     d52:	82 30       	cpi	r24, 0x02	; 2
     d54:	b9 f1       	breq	.+110    	; 0xdc4 <__fpcmp_parts_f+0xa8>
     d56:	81 81       	ldd	r24, Z+1	; 0x01
     d58:	88 23       	and	r24, r24
     d5a:	89 f1       	breq	.+98     	; 0xdbe <__fpcmp_parts_f+0xa2>
     d5c:	2d c0       	rjmp	.+90     	; 0xdb8 <__fpcmp_parts_f+0x9c>
     d5e:	11 96       	adiw	r26, 0x01	; 1
     d60:	1c 91       	ld	r17, X
     d62:	11 97       	sbiw	r26, 0x01	; 1
     d64:	82 30       	cpi	r24, 0x02	; 2
     d66:	f1 f0       	breq	.+60     	; 0xda4 <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	18 17       	cp	r17, r24
     d6c:	d9 f4       	brne	.+54     	; 0xda4 <__fpcmp_parts_f+0x88>
     d6e:	12 96       	adiw	r26, 0x02	; 2
     d70:	2d 91       	ld	r18, X+
     d72:	3c 91       	ld	r19, X
     d74:	13 97       	sbiw	r26, 0x03	; 3
     d76:	82 81       	ldd	r24, Z+2	; 0x02
     d78:	93 81       	ldd	r25, Z+3	; 0x03
     d7a:	82 17       	cp	r24, r18
     d7c:	93 07       	cpc	r25, r19
     d7e:	94 f0       	brlt	.+36     	; 0xda4 <__fpcmp_parts_f+0x88>
     d80:	28 17       	cp	r18, r24
     d82:	39 07       	cpc	r19, r25
     d84:	bc f0       	brlt	.+46     	; 0xdb4 <__fpcmp_parts_f+0x98>
     d86:	14 96       	adiw	r26, 0x04	; 4
     d88:	8d 91       	ld	r24, X+
     d8a:	9d 91       	ld	r25, X+
     d8c:	0d 90       	ld	r0, X+
     d8e:	bc 91       	ld	r27, X
     d90:	a0 2d       	mov	r26, r0
     d92:	24 81       	ldd	r18, Z+4	; 0x04
     d94:	35 81       	ldd	r19, Z+5	; 0x05
     d96:	46 81       	ldd	r20, Z+6	; 0x06
     d98:	57 81       	ldd	r21, Z+7	; 0x07
     d9a:	28 17       	cp	r18, r24
     d9c:	39 07       	cpc	r19, r25
     d9e:	4a 07       	cpc	r20, r26
     da0:	5b 07       	cpc	r21, r27
     da2:	18 f4       	brcc	.+6      	; 0xdaa <__fpcmp_parts_f+0x8e>
     da4:	11 23       	and	r17, r17
     da6:	41 f0       	breq	.+16     	; 0xdb8 <__fpcmp_parts_f+0x9c>
     da8:	0a c0       	rjmp	.+20     	; 0xdbe <__fpcmp_parts_f+0xa2>
     daa:	82 17       	cp	r24, r18
     dac:	93 07       	cpc	r25, r19
     dae:	a4 07       	cpc	r26, r20
     db0:	b5 07       	cpc	r27, r21
     db2:	40 f4       	brcc	.+16     	; 0xdc4 <__fpcmp_parts_f+0xa8>
     db4:	11 23       	and	r17, r17
     db6:	19 f0       	breq	.+6      	; 0xdbe <__fpcmp_parts_f+0xa2>
     db8:	61 e0       	ldi	r22, 0x01	; 1
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	05 c0       	rjmp	.+10     	; 0xdc8 <__fpcmp_parts_f+0xac>
     dbe:	6f ef       	ldi	r22, 0xFF	; 255
     dc0:	7f ef       	ldi	r23, 0xFF	; 255
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <__fpcmp_parts_f+0xac>
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	cb 01       	movw	r24, r22
     dca:	1f 91       	pop	r17
     dcc:	08 95       	ret

00000dce <M_Timer_Void_TimerInit>:
void (*Timer0_CallBack)(void);
void (*Timer1_CallBack)(void);
void (*Timer2_CallBack)(void);

void M_Timer_Void_TimerInit(u8 Copy_U8_TimerChannel) {
	switch (Copy_U8_TimerChannel) {
     dce:	88 23       	and	r24, r24
     dd0:	19 f0       	breq	.+6      	; 0xdd8 <M_Timer_Void_TimerInit+0xa>
     dd2:	82 30       	cpi	r24, 0x02	; 2
     dd4:	e1 f4       	brne	.+56     	; 0xe0e <M_Timer_Void_TimerInit+0x40>
     dd6:	0e c0       	rjmp	.+28     	; 0xdf4 <M_Timer_Void_TimerInit+0x26>
		CLR_BIT(TCCR0_REG,WGM00_BIT);
		CLR_BIT(TCCR0_REG,WGM01_BIT);
		/* TO ENABLE TIMER0 OVERFLOW INT */
		SET_BIT(TIMSK_REG,TOIE0_BIT);
#elif TIMER0_MODE   ==   CTC_MODE
		CLR_BIT(TCCR0_REG, WGM00_BIT);
     dd8:	e3 e5       	ldi	r30, 0x53	; 83
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	8f 7b       	andi	r24, 0xBF	; 191
     de0:	80 83       	st	Z, r24
		SET_BIT(TCCR0_REG, WGM01_BIT);
     de2:	80 81       	ld	r24, Z
     de4:	88 60       	ori	r24, 0x08	; 8
     de6:	80 83       	st	Z, r24
		/* TO ENABLE TIMER0 COMPARE MATCH INT */
		SET_BIT(TIMSK_REG, OCIE0_BIT);
     de8:	e9 e5       	ldi	r30, 0x59	; 89
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	82 60       	ori	r24, 0x02	; 2
     df0:	80 83       	st	Z, r24
     df2:	08 95       	ret
		break;
	case TIMER1_CHANNEL:

		break;
	case TIMER2_CHANNEL:
		CLR_BIT(TCCR2_REG, WGM21_BIT);
     df4:	e5 e4       	ldi	r30, 0x45	; 69
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	87 7f       	andi	r24, 0xF7	; 247
     dfc:	80 83       	st	Z, r24
		CLR_BIT(TCCR2_REG, WGM20_BIT);
     dfe:	80 81       	ld	r24, Z
     e00:	8f 7b       	andi	r24, 0xBF	; 191
     e02:	80 83       	st	Z, r24
		/* TO ENABLE TIMER0 OVERFLOW INT */
		SET_BIT(TIMSK_REG, TOIE2_BIT);
     e04:	e9 e5       	ldi	r30, 0x59	; 89
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	80 64       	ori	r24, 0x40	; 64
     e0c:	80 83       	st	Z, r24
     e0e:	08 95       	ret

00000e10 <M_Timer_Void_TimerSetTime>:
	default:
		break;
	}
}
void M_Timer_Void_TimerSetTime(u8 Copy_U8_TimerChannel,
		u32 Copy_U32_DesiredTime) {
     e10:	9f 92       	push	r9
     e12:	af 92       	push	r10
     e14:	bf 92       	push	r11
     e16:	cf 92       	push	r12
     e18:	df 92       	push	r13
     e1a:	ef 92       	push	r14
     e1c:	ff 92       	push	r15
     e1e:	0f 93       	push	r16
     e20:	1f 93       	push	r17
     e22:	18 2f       	mov	r17, r24
	u32 Local_U32_TickTime = TIMER_PRESCALER_DV / F_OSC; /* result will be in micro second */
	u32 Local_U32_TotalTicks = (Copy_U32_DesiredTime * 1000)
			/ Local_U32_TickTime;
     e24:	cb 01       	movw	r24, r22
     e26:	ba 01       	movw	r22, r20
     e28:	28 ee       	ldi	r18, 0xE8	; 232
     e2a:	33 e0       	ldi	r19, 0x03	; 3
     e2c:	40 e0       	ldi	r20, 0x00	; 0
     e2e:	50 e0       	ldi	r21, 0x00	; 0
     e30:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsi3>
     e34:	5b 01       	movw	r10, r22
     e36:	6c 01       	movw	r12, r24
     e38:	68 94       	set
     e3a:	15 f8       	bld	r1, 5
     e3c:	d6 94       	lsr	r13
     e3e:	c7 94       	ror	r12
     e40:	b7 94       	ror	r11
     e42:	a7 94       	ror	r10
     e44:	16 94       	lsr	r1
     e46:	d1 f7       	brne	.-12     	; 0xe3c <M_Timer_Void_TimerSetTime+0x2c>
	u8 Local_U8_DF = 255;
	switch (Copy_U8_TimerChannel) {
     e48:	11 23       	and	r17, r17
     e4a:	21 f0       	breq	.+8      	; 0xe54 <M_Timer_Void_TimerSetTime+0x44>
     e4c:	12 30       	cpi	r17, 0x02	; 2
     e4e:	09 f0       	breq	.+2      	; 0xe52 <M_Timer_Void_TimerSetTime+0x42>
     e50:	5d c0       	rjmp	.+186    	; 0xf0c <M_Timer_Void_TimerSetTime+0xfc>
     e52:	3e c0       	rjmp	.+124    	; 0xed0 <M_Timer_Void_TimerSetTime+0xc0>
		{
			TCNT0_REG = 256 - Timer_U8_RemTicks;
			Timer_U32_NumOfOverFlows_Timer_0++;
		}
#elif TIMER0_MODE   ==   CTC_MODE     // 500 tick
		while (Local_U32_TotalTicks % Local_U8_DF) {
     e54:	c6 01       	movw	r24, r12
     e56:	b5 01       	movw	r22, r10
     e58:	2f ef       	ldi	r18, 0xFF	; 255
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	40 e0       	ldi	r20, 0x00	; 0
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	0e 94 9e 12 	call	0x253c	; 0x253c <__udivmodsi4>
     e64:	61 15       	cp	r22, r1
     e66:	71 05       	cpc	r23, r1
     e68:	81 05       	cpc	r24, r1
     e6a:	91 05       	cpc	r25, r1
     e6c:	69 f4       	brne	.+26     	; 0xe88 <M_Timer_Void_TimerSetTime+0x78>
     e6e:	99 24       	eor	r9, r9
     e70:	9a 94       	dec	r9
     e72:	0f 2e       	mov	r0, r31
     e74:	ff ef       	ldi	r31, 0xFF	; 255
     e76:	ef 2e       	mov	r14, r31
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	ff 2e       	mov	r15, r31
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	0f 2f       	mov	r16, r31
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	1f 2f       	mov	r17, r31
     e84:	f0 2d       	mov	r31, r0
     e86:	12 c0       	rjmp	.+36     	; 0xeac <M_Timer_Void_TimerSetTime+0x9c>
     e88:	99 24       	eor	r9, r9
     e8a:	9a 94       	dec	r9
			--Local_U8_DF;
     e8c:	9a 94       	dec	r9
		{
			TCNT0_REG = 256 - Timer_U8_RemTicks;
			Timer_U32_NumOfOverFlows_Timer_0++;
		}
#elif TIMER0_MODE   ==   CTC_MODE     // 500 tick
		while (Local_U32_TotalTicks % Local_U8_DF) {
     e8e:	e9 2c       	mov	r14, r9
     e90:	ff 24       	eor	r15, r15
     e92:	00 e0       	ldi	r16, 0x00	; 0
     e94:	10 e0       	ldi	r17, 0x00	; 0
     e96:	c6 01       	movw	r24, r12
     e98:	b5 01       	movw	r22, r10
     e9a:	a8 01       	movw	r20, r16
     e9c:	97 01       	movw	r18, r14
     e9e:	0e 94 9e 12 	call	0x253c	; 0x253c <__udivmodsi4>
     ea2:	61 15       	cp	r22, r1
     ea4:	71 05       	cpc	r23, r1
     ea6:	81 05       	cpc	r24, r1
     ea8:	91 05       	cpc	r25, r1
     eaa:	81 f7       	brne	.-32     	; 0xe8c <M_Timer_Void_TimerSetTime+0x7c>
			--Local_U8_DF;
		}
		Timer_U32_NumOfCompareMatch = Local_U32_TotalTicks / Local_U8_DF;
     eac:	c6 01       	movw	r24, r12
     eae:	b5 01       	movw	r22, r10
     eb0:	a8 01       	movw	r20, r16
     eb2:	97 01       	movw	r18, r14
     eb4:	0e 94 9e 12 	call	0x253c	; 0x253c <__udivmodsi4>
     eb8:	20 93 71 01 	sts	0x0171, r18
     ebc:	30 93 72 01 	sts	0x0172, r19
     ec0:	40 93 73 01 	sts	0x0173, r20
     ec4:	50 93 74 01 	sts	0x0174, r21
		OCR0_REG = Local_U8_DF - 1;
     ec8:	89 2d       	mov	r24, r9
     eca:	81 50       	subi	r24, 0x01	; 1
     ecc:	8c bf       	out	0x3c, r24	; 60
     ece:	1e c0       	rjmp	.+60     	; 0xf0c <M_Timer_Void_TimerSetTime+0xfc>
		break;
	case TIMER1_CHANNEL:

		break;
	case TIMER2_CHANNEL:
		Timer_U32_NumOfOverFlows_Timer_2 = Local_U32_TotalTicks / 256;
     ed0:	55 27       	eor	r21, r21
     ed2:	4d 2d       	mov	r20, r13
     ed4:	3c 2d       	mov	r19, r12
     ed6:	2b 2d       	mov	r18, r11
     ed8:	20 93 6c 01 	sts	0x016C, r18
     edc:	30 93 6d 01 	sts	0x016D, r19
     ee0:	40 93 6e 01 	sts	0x016E, r20
     ee4:	50 93 6f 01 	sts	0x016F, r21
		u8 Timer_U8_RemTicks = Local_U32_TotalTicks % 256;
     ee8:	8a 2d       	mov	r24, r10
		if (Timer_U8_RemTicks != 0) {
     eea:	aa 20       	and	r10, r10
     eec:	79 f0       	breq	.+30     	; 0xf0c <M_Timer_Void_TimerSetTime+0xfc>
			TCNT2_REG = 256 - Timer_U8_RemTicks;
     eee:	81 95       	neg	r24
     ef0:	84 bd       	out	0x24, r24	; 36
			Timer_U32_NumOfOverFlows_Timer_2++;
     ef2:	da 01       	movw	r26, r20
     ef4:	c9 01       	movw	r24, r18
     ef6:	01 96       	adiw	r24, 0x01	; 1
     ef8:	a1 1d       	adc	r26, r1
     efa:	b1 1d       	adc	r27, r1
     efc:	80 93 6c 01 	sts	0x016C, r24
     f00:	90 93 6d 01 	sts	0x016D, r25
     f04:	a0 93 6e 01 	sts	0x016E, r26
     f08:	b0 93 6f 01 	sts	0x016F, r27
		break;
	default:
		break;
	}

}
     f0c:	1f 91       	pop	r17
     f0e:	0f 91       	pop	r16
     f10:	ff 90       	pop	r15
     f12:	ef 90       	pop	r14
     f14:	df 90       	pop	r13
     f16:	cf 90       	pop	r12
     f18:	bf 90       	pop	r11
     f1a:	af 90       	pop	r10
     f1c:	9f 90       	pop	r9
     f1e:	08 95       	ret

00000f20 <M_Timer_Void_TimerStart>:

void M_Timer_Void_TimerStart(u8 Copy_U8_TimerChannel) {
	switch (Copy_U8_TimerChannel) {
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	89 f0       	breq	.+34     	; 0xf46 <M_Timer_Void_TimerStart+0x26>
     f24:	81 30       	cpi	r24, 0x01	; 1
     f26:	18 f0       	brcs	.+6      	; 0xf2e <M_Timer_Void_TimerStart+0xe>
     f28:	82 30       	cpi	r24, 0x02	; 2
     f2a:	21 f5       	brne	.+72     	; 0xf74 <M_Timer_Void_TimerStart+0x54>
     f2c:	18 c0       	rjmp	.+48     	; 0xf5e <M_Timer_Void_TimerStart+0x3e>
	case TIMER0_CHANNEL:
#if   TIMER_PRESCALER_DV   ==   1024
		SET_BIT(TCCR0_REG, CS00_BIT);
     f2e:	e3 e5       	ldi	r30, 0x53	; 83
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	81 60       	ori	r24, 0x01	; 1
     f36:	80 83       	st	Z, r24
		CLR_BIT(TCCR0_REG, CS01_BIT);
     f38:	80 81       	ld	r24, Z
     f3a:	8d 7f       	andi	r24, 0xFD	; 253
     f3c:	80 83       	st	Z, r24
		SET_BIT(TCCR0_REG, CS02_BIT);
     f3e:	80 81       	ld	r24, Z
     f40:	84 60       	ori	r24, 0x04	; 4
     f42:	80 83       	st	Z, r24
     f44:	08 95       	ret
		SET_BIT(TCCR0_REG,CS02_BIT);
#endif
		break;
	case TIMER1_CHANNEL:
		/* TO SELECT TIMER1 PRESCALER DV -> 256 */
		CLR_BIT(TCCR1B_REG, CS10_BIT);
     f46:	ee e4       	ldi	r30, 0x4E	; 78
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	8e 7f       	andi	r24, 0xFE	; 254
     f4e:	80 83       	st	Z, r24
		CLR_BIT(TCCR1B_REG, CS11_BIT);
     f50:	80 81       	ld	r24, Z
     f52:	8d 7f       	andi	r24, 0xFD	; 253
     f54:	80 83       	st	Z, r24
		SET_BIT(TCCR1B_REG, CS12_BIT);
     f56:	80 81       	ld	r24, Z
     f58:	84 60       	ori	r24, 0x04	; 4
     f5a:	80 83       	st	Z, r24
     f5c:	08 95       	ret
		break;
	case TIMER2_CHANNEL:
		SET_BIT(TCCR2_REG, CS22_BIT);
     f5e:	e5 e4       	ldi	r30, 0x45	; 69
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	84 60       	ori	r24, 0x04	; 4
     f66:	80 83       	st	Z, r24
		SET_BIT(TCCR2_REG, CS21_BIT);
     f68:	80 81       	ld	r24, Z
     f6a:	82 60       	ori	r24, 0x02	; 2
     f6c:	80 83       	st	Z, r24
		SET_BIT(TCCR2_REG, CS20_BIT);
     f6e:	80 81       	ld	r24, Z
     f70:	81 60       	ori	r24, 0x01	; 1
     f72:	80 83       	st	Z, r24
     f74:	08 95       	ret

00000f76 <M_Timer_Void_TimerStop>:
	default:
		break;
	}
}
void M_Timer_Void_TimerStop(u8 Copy_U8_TimerChannel) {
	TCNT2_REG = 0x00;//to restart timer not pause
     f76:	14 bc       	out	0x24, r1	; 36
	switch (Copy_U8_TimerChannel) {
     f78:	81 30       	cpi	r24, 0x01	; 1
     f7a:	89 f0       	breq	.+34     	; 0xf9e <M_Timer_Void_TimerStop+0x28>
     f7c:	81 30       	cpi	r24, 0x01	; 1
     f7e:	18 f0       	brcs	.+6      	; 0xf86 <M_Timer_Void_TimerStop+0x10>
     f80:	82 30       	cpi	r24, 0x02	; 2
     f82:	21 f5       	brne	.+72     	; 0xfcc <M_Timer_Void_TimerStop+0x56>
     f84:	18 c0       	rjmp	.+48     	; 0xfb6 <M_Timer_Void_TimerStop+0x40>
	case TIMER0_CHANNEL:
		CLR_BIT(TCCR0_REG, CS00_BIT);
     f86:	e3 e5       	ldi	r30, 0x53	; 83
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	8e 7f       	andi	r24, 0xFE	; 254
     f8e:	80 83       	st	Z, r24
		CLR_BIT(TCCR0_REG, CS01_BIT);
     f90:	80 81       	ld	r24, Z
     f92:	8d 7f       	andi	r24, 0xFD	; 253
     f94:	80 83       	st	Z, r24
		CLR_BIT(TCCR0_REG, CS02_BIT);
     f96:	80 81       	ld	r24, Z
     f98:	8b 7f       	andi	r24, 0xFB	; 251
     f9a:	80 83       	st	Z, r24
     f9c:	08 95       	ret
		break;
	case TIMER1_CHANNEL:
		CLR_BIT(TCCR1B_REG, CS10_BIT);
     f9e:	ee e4       	ldi	r30, 0x4E	; 78
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	8e 7f       	andi	r24, 0xFE	; 254
     fa6:	80 83       	st	Z, r24
		CLR_BIT(TCCR1B_REG, CS11_BIT);
     fa8:	80 81       	ld	r24, Z
     faa:	8d 7f       	andi	r24, 0xFD	; 253
     fac:	80 83       	st	Z, r24
		CLR_BIT(TCCR1B_REG, CS12_BIT);
     fae:	80 81       	ld	r24, Z
     fb0:	8b 7f       	andi	r24, 0xFB	; 251
     fb2:	80 83       	st	Z, r24
     fb4:	08 95       	ret
		break;
	case TIMER2_CHANNEL:
		CLR_BIT(TCCR2_REG, CS22_BIT);
     fb6:	e5 e4       	ldi	r30, 0x45	; 69
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	8b 7f       	andi	r24, 0xFB	; 251
     fbe:	80 83       	st	Z, r24
		CLR_BIT(TCCR2_REG, CS21_BIT);
     fc0:	80 81       	ld	r24, Z
     fc2:	8d 7f       	andi	r24, 0xFD	; 253
     fc4:	80 83       	st	Z, r24
		CLR_BIT(TCCR2_REG, CS20_BIT);
     fc6:	80 81       	ld	r24, Z
     fc8:	8e 7f       	andi	r24, 0xFE	; 254
     fca:	80 83       	st	Z, r24
     fcc:	08 95       	ret

00000fce <M_Timer_Void_PWMSetDutyCycle>:
	default:
		break;
	}
}
void M_Timer_Void_PWMSetDutyCycle(u8 Copy_U8_TimerChannel,
		f32 Copy_F32_DutyCycle) {
     fce:	ef 92       	push	r14
     fd0:	ff 92       	push	r15
     fd2:	0f 93       	push	r16
     fd4:	1f 93       	push	r17
     fd6:	7a 01       	movw	r14, r20
     fd8:	8b 01       	movw	r16, r22
	switch (Copy_U8_TimerChannel) {
     fda:	88 23       	and	r24, r24
     fdc:	21 f0       	breq	.+8      	; 0xfe6 <M_Timer_Void_PWMSetDutyCycle+0x18>
     fde:	81 30       	cpi	r24, 0x01	; 1
     fe0:	09 f0       	breq	.+2      	; 0xfe4 <M_Timer_Void_PWMSetDutyCycle+0x16>
     fe2:	3f c0       	rjmp	.+126    	; 0x1062 <M_Timer_Void_PWMSetDutyCycle+0x94>
     fe4:	24 c0       	rjmp	.+72     	; 0x102e <M_Timer_Void_PWMSetDutyCycle+0x60>
	case TIMER0_CHANNEL:
#if   PWM0_MODE   ==   FAST_PWM
#if   PWM0_MODE2   ==   NON_INVERTED
		if (Copy_F32_DutyCycle == 0) {
     fe6:	cb 01       	movw	r24, r22
     fe8:	ba 01       	movw	r22, r20
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	40 e0       	ldi	r20, 0x00	; 0
     ff0:	50 e0       	ldi	r21, 0x00	; 0
     ff2:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
     ff6:	88 23       	and	r24, r24
     ff8:	11 f4       	brne	.+4      	; 0xffe <M_Timer_Void_PWMSetDutyCycle+0x30>
			OCR0_REG = 0;
     ffa:	1c be       	out	0x3c, r1	; 60
     ffc:	32 c0       	rjmp	.+100    	; 0x1062 <M_Timer_Void_PWMSetDutyCycle+0x94>
		} else {
			OCR0_REG = ((Copy_F32_DutyCycle * 256) / 100) - 1;
     ffe:	c8 01       	movw	r24, r16
    1000:	b7 01       	movw	r22, r14
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	40 e8       	ldi	r20, 0x80	; 128
    1008:	53 e4       	ldi	r21, 0x43	; 67
    100a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	48 ec       	ldi	r20, 0xC8	; 200
    1014:	52 e4       	ldi	r21, 0x42	; 66
    1016:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	40 e8       	ldi	r20, 0x80	; 128
    1020:	5f e3       	ldi	r21, 0x3F	; 63
    1022:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    102a:	6c bf       	out	0x3c, r22	; 60
    102c:	1a c0       	rjmp	.+52     	; 0x1062 <M_Timer_Void_PWMSetDutyCycle+0x94>

#endif
#endif
		break;
	case TIMER1_CHANNEL:
		OCR1A_REG = ((Copy_F32_DutyCycle * ICR1_REG) / 100) - 1;
    102e:	66 b5       	in	r22, 0x26	; 38
    1030:	77 b5       	in	r23, 0x27	; 39
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    103a:	a8 01       	movw	r20, r16
    103c:	97 01       	movw	r18, r14
    103e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	48 ec       	ldi	r20, 0xC8	; 200
    1048:	52 e4       	ldi	r21, 0x42	; 66
    104a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	40 e8       	ldi	r20, 0x80	; 128
    1054:	5f e3       	ldi	r21, 0x3F	; 63
    1056:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    105a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    105e:	7b bd       	out	0x2b, r23	; 43
    1060:	6a bd       	out	0x2a, r22	; 42
	case TIMER2_CHANNEL:
		break;
	default:
		break;
	}
}
    1062:	1f 91       	pop	r17
    1064:	0f 91       	pop	r16
    1066:	ff 90       	pop	r15
    1068:	ef 90       	pop	r14
    106a:	08 95       	ret

0000106c <M_Timer_Void_PWMSetFreaquancy>:
void M_Timer_Void_PWMSetFreaquancy(u8 Copy_U8_Freq) {
	ICR1_REG = ((F_OSC * 1000000 / 256) / Copy_U8_Freq);
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	40 e0       	ldi	r20, 0x00	; 0
    1072:	50 e0       	ldi	r21, 0x00	; 0
    1074:	64 e2       	ldi	r22, 0x24	; 36
    1076:	74 ef       	ldi	r23, 0xF4	; 244
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	0e 94 c0 12 	call	0x2580	; 0x2580 <__divmodsi4>
    1080:	37 bd       	out	0x27, r19	; 39
    1082:	26 bd       	out	0x26, r18	; 38
}
    1084:	08 95       	ret

00001086 <M_Timer_Void_PWMStart>:
void M_Timer_Void_PWMStart(u8 Copy_U8_TimerChannel) {
	M_Timer_Void_TimerStart(Copy_U8_TimerChannel);
    1086:	0e 94 90 07 	call	0xf20	; 0xf20 <M_Timer_Void_TimerStart>
}
    108a:	08 95       	ret

0000108c <M_Timer_Void_PWMStop>:
void M_Timer_Void_PWMStop(u8 Copy_U8_TimerChannel) {
	M_Timer_Void_TimerStop(Copy_U8_TimerChannel);
    108c:	0e 94 bb 07 	call	0xf76	; 0xf76 <M_Timer_Void_TimerStop>
}
    1090:	08 95       	ret

00001092 <M_Timer_Void_SetCallBack>:

void M_Timer_Void_SetCallBack(u8 Copy_U8_TimerChannel, void (*Copy_Ptr)(void)) {
	switch (Copy_U8_TimerChannel) {
    1092:	81 30       	cpi	r24, 0x01	; 1
    1094:	51 f0       	breq	.+20     	; 0x10aa <M_Timer_Void_SetCallBack+0x18>
    1096:	81 30       	cpi	r24, 0x01	; 1
    1098:	18 f0       	brcs	.+6      	; 0x10a0 <M_Timer_Void_SetCallBack+0xe>
    109a:	82 30       	cpi	r24, 0x02	; 2
    109c:	79 f4       	brne	.+30     	; 0x10bc <M_Timer_Void_SetCallBack+0x2a>
    109e:	0a c0       	rjmp	.+20     	; 0x10b4 <M_Timer_Void_SetCallBack+0x22>
	case TIMER0_CHANNEL:
		Timer0_CallBack = Copy_Ptr;
    10a0:	70 93 89 01 	sts	0x0189, r23
    10a4:	60 93 88 01 	sts	0x0188, r22
    10a8:	08 95       	ret
		break;
	case TIMER1_CHANNEL:
		Timer1_CallBack = Copy_Ptr;
    10aa:	70 93 87 01 	sts	0x0187, r23
    10ae:	60 93 86 01 	sts	0x0186, r22
    10b2:	08 95       	ret
		break;
	case TIMER2_CHANNEL:
		Timer2_CallBack = Copy_Ptr;
    10b4:	70 93 85 01 	sts	0x0185, r23
    10b8:	60 93 84 01 	sts	0x0184, r22
    10bc:	08 95       	ret

000010be <__vector_10>:
		Local_U32_Counter = 0;
	}
}
#elif TIMER0_MODE   ==   CTC_MODE
ISR(TIMER0_COMP_vect)
{
    10be:	1f 92       	push	r1
    10c0:	0f 92       	push	r0
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	0f 92       	push	r0
    10c6:	11 24       	eor	r1, r1
    10c8:	2f 93       	push	r18
    10ca:	3f 93       	push	r19
    10cc:	4f 93       	push	r20
    10ce:	5f 93       	push	r21
    10d0:	6f 93       	push	r22
    10d2:	7f 93       	push	r23
    10d4:	8f 93       	push	r24
    10d6:	9f 93       	push	r25
    10d8:	af 93       	push	r26
    10da:	bf 93       	push	r27
    10dc:	ef 93       	push	r30
    10de:	ff 93       	push	r31
	static u32 Local_U32_Counter = 0;
	Local_U32_Counter++;
    10e0:	80 91 79 01 	lds	r24, 0x0179
    10e4:	90 91 7a 01 	lds	r25, 0x017A
    10e8:	a0 91 7b 01 	lds	r26, 0x017B
    10ec:	b0 91 7c 01 	lds	r27, 0x017C
    10f0:	01 96       	adiw	r24, 0x01	; 1
    10f2:	a1 1d       	adc	r26, r1
    10f4:	b1 1d       	adc	r27, r1
    10f6:	80 93 79 01 	sts	0x0179, r24
    10fa:	90 93 7a 01 	sts	0x017A, r25
    10fe:	a0 93 7b 01 	sts	0x017B, r26
    1102:	b0 93 7c 01 	sts	0x017C, r27
	if (Local_U32_Counter == Timer_U32_NumOfCompareMatch) {
    1106:	20 91 71 01 	lds	r18, 0x0171
    110a:	30 91 72 01 	lds	r19, 0x0172
    110e:	40 91 73 01 	lds	r20, 0x0173
    1112:	50 91 74 01 	lds	r21, 0x0174
    1116:	82 17       	cp	r24, r18
    1118:	93 07       	cpc	r25, r19
    111a:	a4 07       	cpc	r26, r20
    111c:	b5 07       	cpc	r27, r21
    111e:	69 f4       	brne	.+26     	; 0x113a <__vector_10+0x7c>
		Timer0_CallBack();
    1120:	e0 91 88 01 	lds	r30, 0x0188
    1124:	f0 91 89 01 	lds	r31, 0x0189
    1128:	09 95       	icall
		Local_U32_Counter = 0;
    112a:	10 92 79 01 	sts	0x0179, r1
    112e:	10 92 7a 01 	sts	0x017A, r1
    1132:	10 92 7b 01 	sts	0x017B, r1
    1136:	10 92 7c 01 	sts	0x017C, r1
	}
}
    113a:	ff 91       	pop	r31
    113c:	ef 91       	pop	r30
    113e:	bf 91       	pop	r27
    1140:	af 91       	pop	r26
    1142:	9f 91       	pop	r25
    1144:	8f 91       	pop	r24
    1146:	7f 91       	pop	r23
    1148:	6f 91       	pop	r22
    114a:	5f 91       	pop	r21
    114c:	4f 91       	pop	r20
    114e:	3f 91       	pop	r19
    1150:	2f 91       	pop	r18
    1152:	0f 90       	pop	r0
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	0f 90       	pop	r0
    1158:	1f 90       	pop	r1
    115a:	18 95       	reti

0000115c <__vector_5>:
#endif
ISR(TIMER2_OVF_vect)
{
    115c:	1f 92       	push	r1
    115e:	0f 92       	push	r0
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	0f 92       	push	r0
    1164:	11 24       	eor	r1, r1
    1166:	2f 93       	push	r18
    1168:	3f 93       	push	r19
    116a:	4f 93       	push	r20
    116c:	5f 93       	push	r21
    116e:	6f 93       	push	r22
    1170:	7f 93       	push	r23
    1172:	8f 93       	push	r24
    1174:	9f 93       	push	r25
    1176:	af 93       	push	r26
    1178:	bf 93       	push	r27
    117a:	ef 93       	push	r30
    117c:	ff 93       	push	r31
	static u32 Local_U32_Counter = 0;
		Local_U32_Counter++;
    117e:	80 91 75 01 	lds	r24, 0x0175
    1182:	90 91 76 01 	lds	r25, 0x0176
    1186:	a0 91 77 01 	lds	r26, 0x0177
    118a:	b0 91 78 01 	lds	r27, 0x0178
    118e:	01 96       	adiw	r24, 0x01	; 1
    1190:	a1 1d       	adc	r26, r1
    1192:	b1 1d       	adc	r27, r1
    1194:	80 93 75 01 	sts	0x0175, r24
    1198:	90 93 76 01 	sts	0x0176, r25
    119c:	a0 93 77 01 	sts	0x0177, r26
    11a0:	b0 93 78 01 	sts	0x0178, r27
		if(Local_U32_Counter == Timer_U32_NumOfOverFlows_Timer_2)
    11a4:	20 91 6c 01 	lds	r18, 0x016C
    11a8:	30 91 6d 01 	lds	r19, 0x016D
    11ac:	40 91 6e 01 	lds	r20, 0x016E
    11b0:	50 91 6f 01 	lds	r21, 0x016F
    11b4:	82 17       	cp	r24, r18
    11b6:	93 07       	cpc	r25, r19
    11b8:	a4 07       	cpc	r26, r20
    11ba:	b5 07       	cpc	r27, r21
    11bc:	89 f4       	brne	.+34     	; 0x11e0 <__vector_5+0x84>
		{
			Timer2_CallBack();
    11be:	e0 91 84 01 	lds	r30, 0x0184
    11c2:	f0 91 85 01 	lds	r31, 0x0185
    11c6:	09 95       	icall
			TCNT2_REG = 256 - Timer_U8_RemTicks;
    11c8:	80 91 70 01 	lds	r24, 0x0170
    11cc:	81 95       	neg	r24
    11ce:	84 bd       	out	0x24, r24	; 36
			Local_U32_Counter = 0;
    11d0:	10 92 75 01 	sts	0x0175, r1
    11d4:	10 92 76 01 	sts	0x0176, r1
    11d8:	10 92 77 01 	sts	0x0177, r1
    11dc:	10 92 78 01 	sts	0x0178, r1
		}

}
    11e0:	ff 91       	pop	r31
    11e2:	ef 91       	pop	r30
    11e4:	bf 91       	pop	r27
    11e6:	af 91       	pop	r26
    11e8:	9f 91       	pop	r25
    11ea:	8f 91       	pop	r24
    11ec:	7f 91       	pop	r23
    11ee:	6f 91       	pop	r22
    11f0:	5f 91       	pop	r21
    11f2:	4f 91       	pop	r20
    11f4:	3f 91       	pop	r19
    11f6:	2f 91       	pop	r18
    11f8:	0f 90       	pop	r0
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	0f 90       	pop	r0
    11fe:	1f 90       	pop	r1
    1200:	18 95       	reti

00001202 <M_Timer_Void_PWMInit>:
		break;
	}
}

void M_Timer_Void_PWMInit(u8 Copy_U8_TimerChannel) {
	switch (Copy_U8_TimerChannel) {
    1202:	88 23       	and	r24, r24
    1204:	19 f0       	breq	.+6      	; 0x120c <M_Timer_Void_PWMInit+0xa>
    1206:	81 30       	cpi	r24, 0x01	; 1
    1208:	71 f5       	brne	.+92     	; 0x1266 <M_Timer_Void_PWMInit+0x64>
    120a:	13 c0       	rjmp	.+38     	; 0x1232 <M_Timer_Void_PWMInit+0x30>
	case TIMER0_CHANNEL:
		M_DIO_Void_SetPinDirection(PB3_PIN, OUTPUT);
    120c:	87 e1       	ldi	r24, 0x17	; 23
    120e:	61 e0       	ldi	r22, 0x01	; 1
    1210:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <M_DIO_Void_SetPinDirection>
#if   PWM0_MODE   ==   FAST_PWM
		SET_BIT(TCCR0_REG, WGM00_BIT);
    1214:	e3 e5       	ldi	r30, 0x53	; 83
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	80 64       	ori	r24, 0x40	; 64
    121c:	80 83       	st	Z, r24
		SET_BIT(TCCR0_REG, WGM01_BIT);
    121e:	80 81       	ld	r24, Z
    1220:	88 60       	ori	r24, 0x08	; 8
    1222:	80 83       	st	Z, r24
#elif PWM0_MODE   ==   PHASE_CORRECT_PWM
		SET_BIT(TCCR0_REG,WGM00_BIT);
		CLR_BIT(TCCR0_REG,WGM01_BIT);
#endif
#if   PWM0_MODE2   ==   NON_INVERTED
		CLR_BIT(TCCR0_REG, COM00_BIT);
    1224:	80 81       	ld	r24, Z
    1226:	8f 7e       	andi	r24, 0xEF	; 239
    1228:	80 83       	st	Z, r24
		SET_BIT(TCCR0_REG, COM01_BIT);
    122a:	80 81       	ld	r24, Z
    122c:	80 62       	ori	r24, 0x20	; 32
    122e:	80 83       	st	Z, r24
    1230:	08 95       	ret
		SET_BIT(TCCR0_REG,COM00_BIT);
		SET_BIT(TCCR0_REG,COM01_BIT);
#endif
		break;
	case TIMER1_CHANNEL:
		M_DIO_Void_SetPinDirection(PD5_PIN, OUTPUT);
    1232:	8d e2       	ldi	r24, 0x2D	; 45
    1234:	61 e0       	ldi	r22, 0x01	; 1
    1236:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <M_DIO_Void_SetPinDirection>
		/* TO SELECT MODE NUMBER 14 AT TABLE (47) */
		CLR_BIT(TCCR1A_REG, WGM10_BIT);
    123a:	af e4       	ldi	r26, 0x4F	; 79
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	8c 91       	ld	r24, X
    1240:	8e 7f       	andi	r24, 0xFE	; 254
    1242:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG, WGM11_BIT);
    1244:	8c 91       	ld	r24, X
    1246:	82 60       	ori	r24, 0x02	; 2
    1248:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG, WGM12_BIT);
    124a:	ee e4       	ldi	r30, 0x4E	; 78
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	88 60       	ori	r24, 0x08	; 8
    1252:	80 83       	st	Z, r24
		SET_BIT(TCCR1B_REG, WGM13_BIT);
    1254:	80 81       	ld	r24, Z
    1256:	80 61       	ori	r24, 0x10	; 16
    1258:	80 83       	st	Z, r24
		/* TO SELECT NON INVERTED MODE */
		CLR_BIT(TCCR1A_REG, COM1A0_BIT);
    125a:	8c 91       	ld	r24, X
    125c:	8f 7b       	andi	r24, 0xBF	; 191
    125e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG, COM1A1_BIT);
    1260:	8c 91       	ld	r24, X
    1262:	80 68       	ori	r24, 0x80	; 128
    1264:	8c 93       	st	X, r24
    1266:	08 95       	ret

00001268 <M_I2C_Void_I2CInit>:

void M_I2C_Void_I2CInit(void)
{
#if   I2C_MODE   ==   I2C_MASTER_MODE
	/* TO SELECT F_SCL -> 400 KHZ */
	TWBR_REG = 12;
    1268:	8c e0       	ldi	r24, 0x0C	; 12
    126a:	80 b9       	out	0x00, r24	; 0
#elif I2C_MODE   ==   I2C_SLAVE_MODE
	TWAR_REG = (SLAVE_ADDRESS << 1 ) | GENERAL_CALL_RESPONSE ;
#endif
	/* TO ENABLE I2C CIRCUIT */
	SET_BIT(TWCR_REG,TWEN_BIT);
    126c:	e6 e5       	ldi	r30, 0x56	; 86
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	84 60       	ori	r24, 0x04	; 4
    1274:	80 83       	st	Z, r24
}
    1276:	08 95       	ret

00001278 <M_I2C_Void_I2CStartCondition>:
void M_I2C_Void_I2CStartCondition(void)
{
	SET_BIT(TWCR_REG,TWSTA_BIT);  /* TO MAKE A START CONDITION */
    1278:	e6 e5       	ldi	r30, 0x56	; 86
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	80 62       	ori	r24, 0x20	; 32
    1280:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG,TWINT_BIT);  /* TO CLEAR THE FLAG */
    1282:	80 81       	ld	r24, Z
    1284:	80 68       	ori	r24, 0x80	; 128
    1286:	80 83       	st	Z, r24
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    1288:	80 81       	ld	r24, Z
    128a:	88 23       	and	r24, r24
    128c:	ec f7       	brge	.-6      	; 0x1288 <M_I2C_Void_I2CStartCondition+0x10>
	while((TWSR_REG & 0xF8) != START_CONDITION_HAS_BEEN_TRANSMITTED);
    128e:	e1 e2       	ldi	r30, 0x21	; 33
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	88 7f       	andi	r24, 0xF8	; 248
    1296:	88 30       	cpi	r24, 0x08	; 8
    1298:	e1 f7       	brne	.-8      	; 0x1292 <M_I2C_Void_I2CStartCondition+0x1a>
}
    129a:	08 95       	ret

0000129c <M_I2C_Void_I2CStopCondition>:
void M_I2C_Void_I2CStopCondition(void)
{
	SET_BIT(TWCR_REG,TWSTO_BIT);  /* TO MAKE A STOP CONDITION */
    129c:	e6 e5       	ldi	r30, 0x56	; 86
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	80 61       	ori	r24, 0x10	; 16
    12a4:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG,TWINT_BIT);  /* TO CLEAR THE FLAG */
    12a6:	80 81       	ld	r24, Z
    12a8:	80 68       	ori	r24, 0x80	; 128
    12aa:	80 83       	st	Z, r24
}
    12ac:	08 95       	ret

000012ae <M_I2C_Void_I2CRepeatedStart>:
void M_I2C_Void_I2CRepeatedStart(void)
{
	SET_BIT(TWCR_REG,TWSTA_BIT);  /* TO CLEAR STA BIT ACCORDING TO TABLE */
    12ae:	e6 e5       	ldi	r30, 0x56	; 86
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	80 62       	ori	r24, 0x20	; 32
    12b6:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG,TWINT_BIT);  /* TO CLEAR THE FLAG */
    12b8:	80 81       	ld	r24, Z
    12ba:	80 68       	ori	r24, 0x80	; 128
    12bc:	80 83       	st	Z, r24
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    12be:	80 81       	ld	r24, Z
    12c0:	88 23       	and	r24, r24
    12c2:	ec f7       	brge	.-6      	; 0x12be <M_I2C_Void_I2CRepeatedStart+0x10>
	while((TWSR_REG & 0xF8) != REPEATED_START_CONDITION_HAS_BEEN_TRANSMITTED);
    12c4:	e1 e2       	ldi	r30, 0x21	; 33
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	88 7f       	andi	r24, 0xF8	; 248
    12cc:	80 31       	cpi	r24, 0x10	; 16
    12ce:	e1 f7       	brne	.-8      	; 0x12c8 <M_I2C_Void_I2CRepeatedStart+0x1a>
}
    12d0:	08 95       	ret

000012d2 <M_I2C_Void_I2CSendSlaveAddressRead>:
	H_LED_Void_LedSetOn(LED1);

}
void M_I2C_Void_I2CSendSlaveAddressRead(u8 Copy_U8_Address)
{
	TWDR_REG = (Copy_U8_Address << 1) | 1;
    12d2:	88 0f       	add	r24, r24
    12d4:	81 60       	ori	r24, 0x01	; 1
    12d6:	83 b9       	out	0x03, r24	; 3
	CLR_BIT(TWCR_REG,TWSTA_BIT);  /* TO CLEAR STA BIT ACCORDING TO TABLE */
    12d8:	e6 e5       	ldi	r30, 0x56	; 86
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	8f 7d       	andi	r24, 0xDF	; 223
    12e0:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG,TWINT_BIT);  /* TO CLEAR THE FLAG */
    12e2:	80 81       	ld	r24, Z
    12e4:	80 68       	ori	r24, 0x80	; 128
    12e6:	80 83       	st	Z, r24
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    12e8:	80 81       	ld	r24, Z
    12ea:	88 23       	and	r24, r24
    12ec:	ec f7       	brge	.-6      	; 0x12e8 <M_I2C_Void_I2CSendSlaveAddressRead+0x16>
	while((TWSR_REG & 0xF8) != SLAVE_ADDRESS_R_TRANSMITTED_ACK_REC);
    12ee:	e1 e2       	ldi	r30, 0x21	; 33
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	88 7f       	andi	r24, 0xF8	; 248
    12f6:	80 34       	cpi	r24, 0x40	; 64
    12f8:	e1 f7       	brne	.-8      	; 0x12f2 <M_I2C_Void_I2CSendSlaveAddressRead+0x20>
}
    12fa:	08 95       	ret

000012fc <M_I2C_Void_I2CSendByte>:
void M_I2C_Void_I2CSendByte(u8 Copy_U8_Data)
{
	TWDR_REG = Copy_U8_Data;
    12fc:	83 b9       	out	0x03, r24	; 3
	CLR_BIT(TWCR_REG,TWSTA_BIT);  /* TO CLEAR STA BIT ACCORDING TO TABLE */
    12fe:	e6 e5       	ldi	r30, 0x56	; 86
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	8f 7d       	andi	r24, 0xDF	; 223
    1306:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG,TWINT_BIT);  /* TO CLEAR THE FLAG */
    1308:	80 81       	ld	r24, Z
    130a:	80 68       	ori	r24, 0x80	; 128
    130c:	80 83       	st	Z, r24
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    130e:	80 81       	ld	r24, Z
    1310:	88 23       	and	r24, r24
    1312:	ec f7       	brge	.-6      	; 0x130e <M_I2C_Void_I2CSendByte+0x12>
	while((TWSR_REG & 0xF8) != BYTE_TRANSMITTED_ACK_REC);
    1314:	e1 e2       	ldi	r30, 0x21	; 33
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	88 7f       	andi	r24, 0xF8	; 248
    131c:	88 32       	cpi	r24, 0x28	; 40
    131e:	e1 f7       	brne	.-8      	; 0x1318 <M_I2C_Void_I2CSendByte+0x1c>
}
    1320:	08 95       	ret

00001322 <M_I2C_Void_I2CReadByte>:
u8   M_I2C_Void_I2CReadByte(void)
{
	CLR_BIT(TWCR_REG,TWSTA_BIT);  /* TO CLEAR STA BIT ACCORDING TO TABLE */
    1322:	e6 e5       	ldi	r30, 0x56	; 86
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	8f 7d       	andi	r24, 0xDF	; 223
    132a:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG,6);
    132c:	80 81       	ld	r24, Z
    132e:	80 64       	ori	r24, 0x40	; 64
    1330:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG,TWINT_BIT);  /* TO CLEAR THE FLAG */
    1332:	80 81       	ld	r24, Z
    1334:	80 68       	ori	r24, 0x80	; 128
    1336:	80 83       	st	Z, r24
	u8 Local_U8_Data = 0;
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    1338:	80 81       	ld	r24, Z
    133a:	88 23       	and	r24, r24
    133c:	ec f7       	brge	.-6      	; 0x1338 <M_I2C_Void_I2CReadByte+0x16>
	while((TWSR_REG & 0xF8) != BYTE_REC_ACK_TRANSMITTED);
    133e:	e1 e2       	ldi	r30, 0x21	; 33
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	88 7f       	andi	r24, 0xF8	; 248
    1346:	80 35       	cpi	r24, 0x50	; 80
    1348:	e1 f7       	brne	.-8      	; 0x1342 <M_I2C_Void_I2CReadByte+0x20>
	Local_U8_Data = TWDR_REG;
    134a:	83 b1       	in	r24, 0x03	; 3
	return Local_U8_Data;
}
    134c:	08 95       	ret

0000134e <M_I2C_Void_I2CSendSlaveAddressWrite>:
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
	while((TWSR_REG & 0xF8) != REPEATED_START_CONDITION_HAS_BEEN_TRANSMITTED);
}
void M_I2C_Void_I2CSendSlaveAddressWrite(u8 Copy_U8_Address)
{
	TWDR_REG = Copy_U8_Address << 1;
    134e:	88 0f       	add	r24, r24
    1350:	83 b9       	out	0x03, r24	; 3
	SET_BIT(TWCR_REG,TWINT_BIT);  /* TO CLEAR THE FLAG */
    1352:	e6 e5       	ldi	r30, 0x56	; 86
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	80 68       	ori	r24, 0x80	; 128
    135a:	80 83       	st	Z, r24
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    135c:	80 81       	ld	r24, Z
    135e:	88 23       	and	r24, r24
    1360:	ec f7       	brge	.-6      	; 0x135c <M_I2C_Void_I2CSendSlaveAddressWrite+0xe>

	while((TWSR_REG & 0xF8) != SLAVE_ADDRESS_W_TRANSMITTED_ACK_REC);
    1362:	e1 e2       	ldi	r30, 0x21	; 33
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	88 7f       	andi	r24, 0xF8	; 248
    136a:	88 31       	cpi	r24, 0x18	; 24
    136c:	e1 f7       	brne	.-8      	; 0x1366 <M_I2C_Void_I2CSendSlaveAddressWrite+0x18>
	H_LED_Void_LedSetOn(LED1);
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <H_LED_Void_LedSetOn>

}
    1374:	08 95       	ret

00001376 <M_GIE_Void_GlobalInterruptEnable>:
#include "GIE_Interface.h"
#include "GIE_Private.h"

void M_GIE_Void_GlobalInterruptEnable(void)
{
	SET_BIT(SREG_REG,I_BIT);
    1376:	ef e5       	ldi	r30, 0x5F	; 95
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	80 68       	ori	r24, 0x80	; 128
    137e:	80 83       	st	Z, r24
}
    1380:	08 95       	ret

00001382 <M_GIE_Void_GlobalInterruptDisable>:
void M_GIE_Void_GlobalInterruptDisable(void)
{
	CLR_BIT(SREG_REG,I_BIT);
    1382:	ef e5       	ldi	r30, 0x5F	; 95
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	8f 77       	andi	r24, 0x7F	; 127
    138a:	80 83       	st	Z, r24
}
    138c:	08 95       	ret

0000138e <M_EXT_INT_Void_ExtIntInit>:
void (*EXT_INT1_CallBack) (void);


void M_EXT_INT_Void_ExtIntInit(u8 Copy_U8_Num)
{
	switch(Copy_U8_Num)
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	99 f0       	breq	.+38     	; 0x13b8 <M_EXT_INT_Void_ExtIntInit+0x2a>
    1392:	81 30       	cpi	r24, 0x01	; 1
    1394:	18 f0       	brcs	.+6      	; 0x139c <M_EXT_INT_Void_ExtIntInit+0xe>
    1396:	82 30       	cpi	r24, 0x02	; 2
    1398:	39 f5       	brne	.+78     	; 0x13e8 <M_EXT_INT_Void_ExtIntInit+0x5a>
    139a:	1c c0       	rjmp	.+56     	; 0x13d4 <M_EXT_INT_Void_ExtIntInit+0x46>
	{
	case EXT_INT_0:
#if   SENSE_CONTROL0   ==   RISING_EDGE
		SET_BIT(MCUCR_REG,ISC00_BIT);
    139c:	e5 e5       	ldi	r30, 0x55	; 85
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	81 60       	ori	r24, 0x01	; 1
    13a4:	80 83       	st	Z, r24
		SET_BIT(MCUCR_REG,ISC01_BIT);
    13a6:	80 81       	ld	r24, Z
    13a8:	82 60       	ori	r24, 0x02	; 2
    13aa:	80 83       	st	Z, r24
#elif SENSE_CONTROL0   ==   ANY_LOGICAL_CHANGE
		SET_BIT(MCUCR_REG,ISC00_BIT);
		CLR_BIT(MCUCR_REG,ISC01_BIT);
#endif
		// to enable local int
		SET_BIT(GICR_REG,INT0_BIT);
    13ac:	eb e5       	ldi	r30, 0x5B	; 91
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	80 64       	ori	r24, 0x40	; 64
    13b4:	80 83       	st	Z, r24
    13b6:	08 95       	ret
		break;
	case EXT_INT_1:
#if   SENSE_CONTROL1   ==   RISING_EDGE
		SET_BIT(MCUCR_REG,ISC10_BIT);
    13b8:	e5 e5       	ldi	r30, 0x55	; 85
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	84 60       	ori	r24, 0x04	; 4
    13c0:	80 83       	st	Z, r24
		SET_BIT(MCUCR_REG,ISC11_BIT);
    13c2:	80 81       	ld	r24, Z
    13c4:	88 60       	ori	r24, 0x08	; 8
    13c6:	80 83       	st	Z, r24
#elif SENSE_CONTROL1   ==   ANY_LOGICAL_CHANGE
		SET_BIT(MCUCR_REG,ISC10_BIT);
		CLR_BIT(MCUCR_REG,ISC11_BIT);
#endif
		// to enable local int
		SET_BIT(GICR_REG,INT1_BIT);
    13c8:	eb e5       	ldi	r30, 0x5B	; 91
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	80 68       	ori	r24, 0x80	; 128
    13d0:	80 83       	st	Z, r24
    13d2:	08 95       	ret
		break;
	case EXT_INT_2:
#if   SENSE_CONTROL2   ==   RISING_EDGE
		SET_BIT(MCUCSR_REG,ISC2_BIT);
    13d4:	e4 e5       	ldi	r30, 0x54	; 84
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	80 64       	ori	r24, 0x40	; 64
    13dc:	80 83       	st	Z, r24
#elif SENSE_CONTROL2   ==   FALLING_EDGE
		CLR_BIT(MCUCSR_REG,ISC2_BIT);
#endif
		// to enable local int
		SET_BIT(GICR_REG,INT2_BIT);
    13de:	eb e5       	ldi	r30, 0x5B	; 91
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	80 62       	ori	r24, 0x20	; 32
    13e6:	80 83       	st	Z, r24
    13e8:	08 95       	ret

000013ea <M_EXT_INT_Void_SetCallBack>:
	}
}

void M_EXT_INT_Void_SetCallBack(u8 Copy_U8_Channel,void(*Copy_Ptr)(void))
{
	switch(Copy_U8_Channel)
    13ea:	88 23       	and	r24, r24
    13ec:	19 f0       	breq	.+6      	; 0x13f4 <M_EXT_INT_Void_SetCallBack+0xa>
    13ee:	81 30       	cpi	r24, 0x01	; 1
    13f0:	51 f4       	brne	.+20     	; 0x1406 <M_EXT_INT_Void_SetCallBack+0x1c>
    13f2:	05 c0       	rjmp	.+10     	; 0x13fe <M_EXT_INT_Void_SetCallBack+0x14>
	{
	case EXT_INT_0:EXT_INT0_CallBack = Copy_Ptr;break;
    13f4:	70 93 8d 01 	sts	0x018D, r23
    13f8:	60 93 8c 01 	sts	0x018C, r22
    13fc:	08 95       	ret
	case EXT_INT_1:EXT_INT1_CallBack = Copy_Ptr;break;
    13fe:	70 93 8b 01 	sts	0x018B, r23
    1402:	60 93 8a 01 	sts	0x018A, r22
    1406:	08 95       	ret

00001408 <__vector_1>:
	}

}

ISR(INT0_vect)
{
    1408:	1f 92       	push	r1
    140a:	0f 92       	push	r0
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	0f 92       	push	r0
    1410:	11 24       	eor	r1, r1
    1412:	2f 93       	push	r18
    1414:	3f 93       	push	r19
    1416:	4f 93       	push	r20
    1418:	5f 93       	push	r21
    141a:	6f 93       	push	r22
    141c:	7f 93       	push	r23
    141e:	8f 93       	push	r24
    1420:	9f 93       	push	r25
    1422:	af 93       	push	r26
    1424:	bf 93       	push	r27
    1426:	ef 93       	push	r30
    1428:	ff 93       	push	r31
	EXT_INT0_CallBack();
    142a:	e0 91 8c 01 	lds	r30, 0x018C
    142e:	f0 91 8d 01 	lds	r31, 0x018D
    1432:	09 95       	icall
}
    1434:	ff 91       	pop	r31
    1436:	ef 91       	pop	r30
    1438:	bf 91       	pop	r27
    143a:	af 91       	pop	r26
    143c:	9f 91       	pop	r25
    143e:	8f 91       	pop	r24
    1440:	7f 91       	pop	r23
    1442:	6f 91       	pop	r22
    1444:	5f 91       	pop	r21
    1446:	4f 91       	pop	r20
    1448:	3f 91       	pop	r19
    144a:	2f 91       	pop	r18
    144c:	0f 90       	pop	r0
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	0f 90       	pop	r0
    1452:	1f 90       	pop	r1
    1454:	18 95       	reti

00001456 <__vector_2>:
ISR(INT1_vect)
{
    1456:	1f 92       	push	r1
    1458:	0f 92       	push	r0
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	0f 92       	push	r0
    145e:	11 24       	eor	r1, r1
    1460:	2f 93       	push	r18
    1462:	3f 93       	push	r19
    1464:	4f 93       	push	r20
    1466:	5f 93       	push	r21
    1468:	6f 93       	push	r22
    146a:	7f 93       	push	r23
    146c:	8f 93       	push	r24
    146e:	9f 93       	push	r25
    1470:	af 93       	push	r26
    1472:	bf 93       	push	r27
    1474:	ef 93       	push	r30
    1476:	ff 93       	push	r31
	EXT_INT1_CallBack();
    1478:	e0 91 8a 01 	lds	r30, 0x018A
    147c:	f0 91 8b 01 	lds	r31, 0x018B
    1480:	09 95       	icall
}
    1482:	ff 91       	pop	r31
    1484:	ef 91       	pop	r30
    1486:	bf 91       	pop	r27
    1488:	af 91       	pop	r26
    148a:	9f 91       	pop	r25
    148c:	8f 91       	pop	r24
    148e:	7f 91       	pop	r23
    1490:	6f 91       	pop	r22
    1492:	5f 91       	pop	r21
    1494:	4f 91       	pop	r20
    1496:	3f 91       	pop	r19
    1498:	2f 91       	pop	r18
    149a:	0f 90       	pop	r0
    149c:	0f be       	out	0x3f, r0	; 63
    149e:	0f 90       	pop	r0
    14a0:	1f 90       	pop	r1
    14a2:	18 95       	reti

000014a4 <__vector_3>:
ISR(INT2_vect)
{
    14a4:	1f 92       	push	r1
    14a6:	0f 92       	push	r0
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	0f 92       	push	r0
    14ac:	11 24       	eor	r1, r1

}
    14ae:	0f 90       	pop	r0
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	0f 90       	pop	r0
    14b4:	1f 90       	pop	r1
    14b6:	18 95       	reti

000014b8 <M_DIO_Void_SetPinDirection>:
#include "DIO_Private.h"
#include "DIO_Interface.h"


void M_DIO_Void_SetPinDirection(u8 Copy_U8_Num ,u8 Copy_U8_State)
{
    14b8:	28 2f       	mov	r18, r24
    14ba:	36 2f       	mov	r19, r22
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
    14bc:	6a e0       	ldi	r22, 0x0A	; 10
    14be:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodqi4>
    14c2:	49 2f       	mov	r20, r25
	u8 Local_U8_Port = Copy_U8_Num / 10;
    14c4:	82 2f       	mov	r24, r18
    14c6:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodqi4>
			switch(Copy_U8_State)
    14ca:	33 23       	and	r19, r19
    14cc:	21 f0       	breq	.+8      	; 0x14d6 <M_DIO_Void_SetPinDirection+0x1e>
    14ce:	31 30       	cpi	r19, 0x01	; 1
    14d0:	09 f0       	breq	.+2      	; 0x14d4 <M_DIO_Void_SetPinDirection+0x1c>
    14d2:	86 c0       	rjmp	.+268    	; 0x15e0 <M_DIO_Void_SetPinDirection+0x128>
    14d4:	46 c0       	rjmp	.+140    	; 0x1562 <M_DIO_Void_SetPinDirection+0xaa>
			{
			case INPUT :
				switch(Local_U8_Port)
    14d6:	82 30       	cpi	r24, 0x02	; 2
    14d8:	d1 f0       	breq	.+52     	; 0x150e <M_DIO_Void_SetPinDirection+0x56>
    14da:	83 30       	cpi	r24, 0x03	; 3
    14dc:	20 f4       	brcc	.+8      	; 0x14e6 <M_DIO_Void_SetPinDirection+0x2e>
    14de:	81 30       	cpi	r24, 0x01	; 1
    14e0:	09 f0       	breq	.+2      	; 0x14e4 <M_DIO_Void_SetPinDirection+0x2c>
    14e2:	7e c0       	rjmp	.+252    	; 0x15e0 <M_DIO_Void_SetPinDirection+0x128>
    14e4:	06 c0       	rjmp	.+12     	; 0x14f2 <M_DIO_Void_SetPinDirection+0x3a>
    14e6:	83 30       	cpi	r24, 0x03	; 3
    14e8:	01 f1       	breq	.+64     	; 0x152a <M_DIO_Void_SetPinDirection+0x72>
    14ea:	84 30       	cpi	r24, 0x04	; 4
    14ec:	09 f0       	breq	.+2      	; 0x14f0 <M_DIO_Void_SetPinDirection+0x38>
    14ee:	78 c0       	rjmp	.+240    	; 0x15e0 <M_DIO_Void_SetPinDirection+0x128>
    14f0:	2a c0       	rjmp	.+84     	; 0x1546 <M_DIO_Void_SetPinDirection+0x8e>
				{
				case 1: CLR_BIT(DDRA_REG,Local_U8_Pin); break;
    14f2:	ea e3       	ldi	r30, 0x3A	; 58
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	20 81       	ld	r18, Z
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <M_DIO_Void_SetPinDirection+0x4a>
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	4a 95       	dec	r20
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <M_DIO_Void_SetPinDirection+0x46>
    1506:	80 95       	com	r24
    1508:	82 23       	and	r24, r18
    150a:	80 83       	st	Z, r24
    150c:	08 95       	ret
				case 2: CLR_BIT(DDRB_REG,Local_U8_Pin); break;
    150e:	e7 e3       	ldi	r30, 0x37	; 55
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	20 81       	ld	r18, Z
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	02 c0       	rjmp	.+4      	; 0x151e <M_DIO_Void_SetPinDirection+0x66>
    151a:	88 0f       	add	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	4a 95       	dec	r20
    1520:	e2 f7       	brpl	.-8      	; 0x151a <M_DIO_Void_SetPinDirection+0x62>
    1522:	80 95       	com	r24
    1524:	82 23       	and	r24, r18
    1526:	80 83       	st	Z, r24
    1528:	08 95       	ret
				case 3: CLR_BIT(DDRC_REG,Local_U8_Pin); break;
    152a:	e4 e3       	ldi	r30, 0x34	; 52
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	20 81       	ld	r18, Z
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	02 c0       	rjmp	.+4      	; 0x153a <M_DIO_Void_SetPinDirection+0x82>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	4a 95       	dec	r20
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <M_DIO_Void_SetPinDirection+0x7e>
    153e:	80 95       	com	r24
    1540:	82 23       	and	r24, r18
    1542:	80 83       	st	Z, r24
    1544:	08 95       	ret
				case 4: CLR_BIT(DDRD_REG,Local_U8_Pin); break;
    1546:	e1 e3       	ldi	r30, 0x31	; 49
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	20 81       	ld	r18, Z
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <M_DIO_Void_SetPinDirection+0x9e>
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	4a 95       	dec	r20
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <M_DIO_Void_SetPinDirection+0x9a>
    155a:	80 95       	com	r24
    155c:	82 23       	and	r24, r18
    155e:	80 83       	st	Z, r24
    1560:	08 95       	ret
				default:                                break;
				}
				break;
			case OUTPUT:
				switch(Local_U8_Port)
    1562:	82 30       	cpi	r24, 0x02	; 2
    1564:	b9 f0       	breq	.+46     	; 0x1594 <M_DIO_Void_SetPinDirection+0xdc>
    1566:	83 30       	cpi	r24, 0x03	; 3
    1568:	18 f4       	brcc	.+6      	; 0x1570 <M_DIO_Void_SetPinDirection+0xb8>
    156a:	81 30       	cpi	r24, 0x01	; 1
    156c:	c9 f5       	brne	.+114    	; 0x15e0 <M_DIO_Void_SetPinDirection+0x128>
    156e:	05 c0       	rjmp	.+10     	; 0x157a <M_DIO_Void_SetPinDirection+0xc2>
    1570:	83 30       	cpi	r24, 0x03	; 3
    1572:	e9 f0       	breq	.+58     	; 0x15ae <M_DIO_Void_SetPinDirection+0xf6>
    1574:	84 30       	cpi	r24, 0x04	; 4
    1576:	a1 f5       	brne	.+104    	; 0x15e0 <M_DIO_Void_SetPinDirection+0x128>
    1578:	27 c0       	rjmp	.+78     	; 0x15c8 <M_DIO_Void_SetPinDirection+0x110>
				{
				case 1: SET_BIT(DDRA_REG,Local_U8_Pin); break;
    157a:	ea e3       	ldi	r30, 0x3A	; 58
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	20 81       	ld	r18, Z
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	02 c0       	rjmp	.+4      	; 0x158a <M_DIO_Void_SetPinDirection+0xd2>
    1586:	88 0f       	add	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	4a 95       	dec	r20
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <M_DIO_Void_SetPinDirection+0xce>
    158e:	28 2b       	or	r18, r24
    1590:	20 83       	st	Z, r18
    1592:	08 95       	ret
				case 2: SET_BIT(DDRB_REG,Local_U8_Pin); break;
    1594:	e7 e3       	ldi	r30, 0x37	; 55
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	20 81       	ld	r18, Z
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <M_DIO_Void_SetPinDirection+0xec>
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	4a 95       	dec	r20
    15a6:	e2 f7       	brpl	.-8      	; 0x15a0 <M_DIO_Void_SetPinDirection+0xe8>
    15a8:	28 2b       	or	r18, r24
    15aa:	20 83       	st	Z, r18
    15ac:	08 95       	ret
				case 3: SET_BIT(DDRC_REG,Local_U8_Pin); break;
    15ae:	e4 e3       	ldi	r30, 0x34	; 52
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	20 81       	ld	r18, Z
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <M_DIO_Void_SetPinDirection+0x106>
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	4a 95       	dec	r20
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <M_DIO_Void_SetPinDirection+0x102>
    15c2:	28 2b       	or	r18, r24
    15c4:	20 83       	st	Z, r18
    15c6:	08 95       	ret
				case 4: SET_BIT(DDRD_REG,Local_U8_Pin); break;
    15c8:	e1 e3       	ldi	r30, 0x31	; 49
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	20 81       	ld	r18, Z
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <M_DIO_Void_SetPinDirection+0x120>
    15d4:	88 0f       	add	r24, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	4a 95       	dec	r20
    15da:	e2 f7       	brpl	.-8      	; 0x15d4 <M_DIO_Void_SetPinDirection+0x11c>
    15dc:	28 2b       	or	r18, r24
    15de:	20 83       	st	Z, r18
    15e0:	08 95       	ret

000015e2 <M_DIO_Void_SetPinValue>:
				default:                                break;
			}
}

void M_DIO_Void_SetPinValue(u8 Copy_U8_Num ,u8 Copy_U8_State)
{
    15e2:	28 2f       	mov	r18, r24
    15e4:	36 2f       	mov	r19, r22
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
    15e6:	6a e0       	ldi	r22, 0x0A	; 10
    15e8:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodqi4>
    15ec:	49 2f       	mov	r20, r25
	u8 Local_U8_Port = Copy_U8_Num / 10;
    15ee:	82 2f       	mov	r24, r18
    15f0:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodqi4>
			switch(Copy_U8_State)
    15f4:	33 23       	and	r19, r19
    15f6:	21 f0       	breq	.+8      	; 0x1600 <M_DIO_Void_SetPinValue+0x1e>
    15f8:	31 30       	cpi	r19, 0x01	; 1
    15fa:	09 f0       	breq	.+2      	; 0x15fe <M_DIO_Void_SetPinValue+0x1c>
    15fc:	86 c0       	rjmp	.+268    	; 0x170a <M_DIO_Void_SetPinValue+0x128>
    15fe:	46 c0       	rjmp	.+140    	; 0x168c <M_DIO_Void_SetPinValue+0xaa>
			{
			case LOW :
				switch(Local_U8_Port)
    1600:	82 30       	cpi	r24, 0x02	; 2
    1602:	d1 f0       	breq	.+52     	; 0x1638 <M_DIO_Void_SetPinValue+0x56>
    1604:	83 30       	cpi	r24, 0x03	; 3
    1606:	20 f4       	brcc	.+8      	; 0x1610 <M_DIO_Void_SetPinValue+0x2e>
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	09 f0       	breq	.+2      	; 0x160e <M_DIO_Void_SetPinValue+0x2c>
    160c:	7e c0       	rjmp	.+252    	; 0x170a <M_DIO_Void_SetPinValue+0x128>
    160e:	06 c0       	rjmp	.+12     	; 0x161c <M_DIO_Void_SetPinValue+0x3a>
    1610:	83 30       	cpi	r24, 0x03	; 3
    1612:	01 f1       	breq	.+64     	; 0x1654 <M_DIO_Void_SetPinValue+0x72>
    1614:	84 30       	cpi	r24, 0x04	; 4
    1616:	09 f0       	breq	.+2      	; 0x161a <M_DIO_Void_SetPinValue+0x38>
    1618:	78 c0       	rjmp	.+240    	; 0x170a <M_DIO_Void_SetPinValue+0x128>
    161a:	2a c0       	rjmp	.+84     	; 0x1670 <M_DIO_Void_SetPinValue+0x8e>
				{
				case 1: CLR_BIT(PORTA_REG,Local_U8_Pin); break;
    161c:	eb e3       	ldi	r30, 0x3B	; 59
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	20 81       	ld	r18, Z
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	02 c0       	rjmp	.+4      	; 0x162c <M_DIO_Void_SetPinValue+0x4a>
    1628:	88 0f       	add	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	4a 95       	dec	r20
    162e:	e2 f7       	brpl	.-8      	; 0x1628 <M_DIO_Void_SetPinValue+0x46>
    1630:	80 95       	com	r24
    1632:	82 23       	and	r24, r18
    1634:	80 83       	st	Z, r24
    1636:	08 95       	ret
				case 2: CLR_BIT(PORTB_REG,Local_U8_Pin); break;
    1638:	e8 e3       	ldi	r30, 0x38	; 56
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	20 81       	ld	r18, Z
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <M_DIO_Void_SetPinValue+0x66>
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	4a 95       	dec	r20
    164a:	e2 f7       	brpl	.-8      	; 0x1644 <M_DIO_Void_SetPinValue+0x62>
    164c:	80 95       	com	r24
    164e:	82 23       	and	r24, r18
    1650:	80 83       	st	Z, r24
    1652:	08 95       	ret
				case 3: CLR_BIT(PORTC_REG,Local_U8_Pin); break;
    1654:	e5 e3       	ldi	r30, 0x35	; 53
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	20 81       	ld	r18, Z
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <M_DIO_Void_SetPinValue+0x82>
    1660:	88 0f       	add	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	4a 95       	dec	r20
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <M_DIO_Void_SetPinValue+0x7e>
    1668:	80 95       	com	r24
    166a:	82 23       	and	r24, r18
    166c:	80 83       	st	Z, r24
    166e:	08 95       	ret
				case 4: CLR_BIT(PORTD_REG,Local_U8_Pin); break;
    1670:	e2 e3       	ldi	r30, 0x32	; 50
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	20 81       	ld	r18, Z
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <M_DIO_Void_SetPinValue+0x9e>
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	4a 95       	dec	r20
    1682:	e2 f7       	brpl	.-8      	; 0x167c <M_DIO_Void_SetPinValue+0x9a>
    1684:	80 95       	com	r24
    1686:	82 23       	and	r24, r18
    1688:	80 83       	st	Z, r24
    168a:	08 95       	ret
				default:                                 break;
				}
				break;
			case HIGH:
				switch(Local_U8_Port)
    168c:	82 30       	cpi	r24, 0x02	; 2
    168e:	b9 f0       	breq	.+46     	; 0x16be <M_DIO_Void_SetPinValue+0xdc>
    1690:	83 30       	cpi	r24, 0x03	; 3
    1692:	18 f4       	brcc	.+6      	; 0x169a <M_DIO_Void_SetPinValue+0xb8>
    1694:	81 30       	cpi	r24, 0x01	; 1
    1696:	c9 f5       	brne	.+114    	; 0x170a <M_DIO_Void_SetPinValue+0x128>
    1698:	05 c0       	rjmp	.+10     	; 0x16a4 <M_DIO_Void_SetPinValue+0xc2>
    169a:	83 30       	cpi	r24, 0x03	; 3
    169c:	e9 f0       	breq	.+58     	; 0x16d8 <M_DIO_Void_SetPinValue+0xf6>
    169e:	84 30       	cpi	r24, 0x04	; 4
    16a0:	a1 f5       	brne	.+104    	; 0x170a <M_DIO_Void_SetPinValue+0x128>
    16a2:	27 c0       	rjmp	.+78     	; 0x16f2 <M_DIO_Void_SetPinValue+0x110>
				{
				case 1: SET_BIT(PORTA_REG,Local_U8_Pin); break;
    16a4:	eb e3       	ldi	r30, 0x3B	; 59
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	20 81       	ld	r18, Z
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <M_DIO_Void_SetPinValue+0xd2>
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	4a 95       	dec	r20
    16b6:	e2 f7       	brpl	.-8      	; 0x16b0 <M_DIO_Void_SetPinValue+0xce>
    16b8:	28 2b       	or	r18, r24
    16ba:	20 83       	st	Z, r18
    16bc:	08 95       	ret
				case 2: SET_BIT(PORTB_REG,Local_U8_Pin); break;
    16be:	e8 e3       	ldi	r30, 0x38	; 56
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	20 81       	ld	r18, Z
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <M_DIO_Void_SetPinValue+0xec>
    16ca:	88 0f       	add	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	4a 95       	dec	r20
    16d0:	e2 f7       	brpl	.-8      	; 0x16ca <M_DIO_Void_SetPinValue+0xe8>
    16d2:	28 2b       	or	r18, r24
    16d4:	20 83       	st	Z, r18
    16d6:	08 95       	ret
				case 3: SET_BIT(PORTC_REG,Local_U8_Pin); break;
    16d8:	e5 e3       	ldi	r30, 0x35	; 53
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	20 81       	ld	r18, Z
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <M_DIO_Void_SetPinValue+0x106>
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	4a 95       	dec	r20
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <M_DIO_Void_SetPinValue+0x102>
    16ec:	28 2b       	or	r18, r24
    16ee:	20 83       	st	Z, r18
    16f0:	08 95       	ret
				case 4: SET_BIT(PORTD_REG,Local_U8_Pin); break;
    16f2:	e2 e3       	ldi	r30, 0x32	; 50
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	20 81       	ld	r18, Z
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <M_DIO_Void_SetPinValue+0x120>
    16fe:	88 0f       	add	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	4a 95       	dec	r20
    1704:	e2 f7       	brpl	.-8      	; 0x16fe <M_DIO_Void_SetPinValue+0x11c>
    1706:	28 2b       	or	r18, r24
    1708:	20 83       	st	Z, r18
    170a:	08 95       	ret

0000170c <M_DIO_Void_TogPin>:
				break;
				default:                                 break;
			}
}
void M_DIO_Void_TogPin(u8 Copy_U8_Num)
{
    170c:	28 2f       	mov	r18, r24
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
    170e:	6a e0       	ldi	r22, 0x0A	; 10
    1710:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodqi4>
    1714:	39 2f       	mov	r19, r25
	u8 Local_U8_Port = Copy_U8_Num / 10;
	switch(Local_U8_Port)
    1716:	82 2f       	mov	r24, r18
    1718:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodqi4>
    171c:	82 30       	cpi	r24, 0x02	; 2
    171e:	b9 f0       	breq	.+46     	; 0x174e <M_DIO_Void_TogPin+0x42>
    1720:	83 30       	cpi	r24, 0x03	; 3
    1722:	18 f4       	brcc	.+6      	; 0x172a <M_DIO_Void_TogPin+0x1e>
    1724:	81 30       	cpi	r24, 0x01	; 1
    1726:	c9 f5       	brne	.+114    	; 0x179a <M_DIO_Void_TogPin+0x8e>
    1728:	05 c0       	rjmp	.+10     	; 0x1734 <M_DIO_Void_TogPin+0x28>
    172a:	83 30       	cpi	r24, 0x03	; 3
    172c:	e9 f0       	breq	.+58     	; 0x1768 <M_DIO_Void_TogPin+0x5c>
    172e:	84 30       	cpi	r24, 0x04	; 4
    1730:	a1 f5       	brne	.+104    	; 0x179a <M_DIO_Void_TogPin+0x8e>
    1732:	27 c0       	rjmp	.+78     	; 0x1782 <M_DIO_Void_TogPin+0x76>
	{
	case 1: TOG_BIT(PORTA_REG,Local_U8_Pin); break;
    1734:	eb e3       	ldi	r30, 0x3B	; 59
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	20 81       	ld	r18, Z
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <M_DIO_Void_TogPin+0x38>
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	3a 95       	dec	r19
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <M_DIO_Void_TogPin+0x34>
    1748:	28 27       	eor	r18, r24
    174a:	20 83       	st	Z, r18
    174c:	08 95       	ret
	case 2: TOG_BIT(PORTB_REG,Local_U8_Pin); break;
    174e:	e8 e3       	ldi	r30, 0x38	; 56
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	20 81       	ld	r18, Z
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	02 c0       	rjmp	.+4      	; 0x175e <M_DIO_Void_TogPin+0x52>
    175a:	88 0f       	add	r24, r24
    175c:	99 1f       	adc	r25, r25
    175e:	3a 95       	dec	r19
    1760:	e2 f7       	brpl	.-8      	; 0x175a <M_DIO_Void_TogPin+0x4e>
    1762:	28 27       	eor	r18, r24
    1764:	20 83       	st	Z, r18
    1766:	08 95       	ret
	case 3: TOG_BIT(PORTC_REG,Local_U8_Pin); break;
    1768:	e5 e3       	ldi	r30, 0x35	; 53
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	20 81       	ld	r18, Z
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <M_DIO_Void_TogPin+0x6c>
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	3a 95       	dec	r19
    177a:	e2 f7       	brpl	.-8      	; 0x1774 <M_DIO_Void_TogPin+0x68>
    177c:	28 27       	eor	r18, r24
    177e:	20 83       	st	Z, r18
    1780:	08 95       	ret
	case 4: TOG_BIT(PORTD_REG,Local_U8_Pin); break;
    1782:	e2 e3       	ldi	r30, 0x32	; 50
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	20 81       	ld	r18, Z
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <M_DIO_Void_TogPin+0x86>
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	3a 95       	dec	r19
    1794:	e2 f7       	brpl	.-8      	; 0x178e <M_DIO_Void_TogPin+0x82>
    1796:	28 27       	eor	r18, r24
    1798:	20 83       	st	Z, r18
    179a:	08 95       	ret

0000179c <M_DIO_U8_GetPinValue>:
	default:                                 break;
	}
}
u8   M_DIO_U8_GetPinValue(u8 Copy_U8_Num)
{
    179c:	28 2f       	mov	r18, r24
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
    179e:	6a e0       	ldi	r22, 0x0A	; 10
    17a0:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodqi4>
    17a4:	39 2f       	mov	r19, r25
	u8 Local_U8_Port = Copy_U8_Num / 10;
	u8 Local_U8_Reading = 0;
	switch(Local_U8_Port)
    17a6:	82 2f       	mov	r24, r18
    17a8:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodqi4>
    17ac:	82 30       	cpi	r24, 0x02	; 2
    17ae:	a1 f0       	breq	.+40     	; 0x17d8 <M_DIO_U8_GetPinValue+0x3c>
    17b0:	83 30       	cpi	r24, 0x03	; 3
    17b2:	18 f4       	brcc	.+6      	; 0x17ba <M_DIO_U8_GetPinValue+0x1e>
    17b4:	81 30       	cpi	r24, 0x01	; 1
    17b6:	29 f4       	brne	.+10     	; 0x17c2 <M_DIO_U8_GetPinValue+0x26>
    17b8:	06 c0       	rjmp	.+12     	; 0x17c6 <M_DIO_U8_GetPinValue+0x2a>
    17ba:	83 30       	cpi	r24, 0x03	; 3
    17bc:	b1 f0       	breq	.+44     	; 0x17ea <M_DIO_U8_GetPinValue+0x4e>
    17be:	84 30       	cpi	r24, 0x04	; 4
    17c0:	e9 f0       	breq	.+58     	; 0x17fc <M_DIO_U8_GetPinValue+0x60>
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	08 95       	ret
	{
	case 1: Local_U8_Reading = GET_BIT(PINA_REG,Local_U8_Pin); break;
    17c6:	89 b3       	in	r24, 0x19	; 25
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <M_DIO_U8_GetPinValue+0x34>
    17cc:	95 95       	asr	r25
    17ce:	87 95       	ror	r24
    17d0:	3a 95       	dec	r19
    17d2:	e2 f7       	brpl	.-8      	; 0x17cc <M_DIO_U8_GetPinValue+0x30>
    17d4:	81 70       	andi	r24, 0x01	; 1
    17d6:	08 95       	ret
	case 2: Local_U8_Reading = GET_BIT(PINB_REG,Local_U8_Pin); break;
    17d8:	86 b3       	in	r24, 0x16	; 22
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <M_DIO_U8_GetPinValue+0x46>
    17de:	95 95       	asr	r25
    17e0:	87 95       	ror	r24
    17e2:	3a 95       	dec	r19
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <M_DIO_U8_GetPinValue+0x42>
    17e6:	81 70       	andi	r24, 0x01	; 1
    17e8:	08 95       	ret
	case 3: Local_U8_Reading = GET_BIT(PINC_REG,Local_U8_Pin); break;
    17ea:	83 b3       	in	r24, 0x13	; 19
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <M_DIO_U8_GetPinValue+0x58>
    17f0:	95 95       	asr	r25
    17f2:	87 95       	ror	r24
    17f4:	3a 95       	dec	r19
    17f6:	e2 f7       	brpl	.-8      	; 0x17f0 <M_DIO_U8_GetPinValue+0x54>
    17f8:	81 70       	andi	r24, 0x01	; 1
    17fa:	08 95       	ret
	case 4: Local_U8_Reading = GET_BIT(PIND_REG,Local_U8_Pin); break;
    17fc:	80 b3       	in	r24, 0x10	; 16
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <M_DIO_U8_GetPinValue+0x6a>
    1802:	95 95       	asr	r25
    1804:	87 95       	ror	r24
    1806:	3a 95       	dec	r19
    1808:	e2 f7       	brpl	.-8      	; 0x1802 <M_DIO_U8_GetPinValue+0x66>
    180a:	81 70       	andi	r24, 0x01	; 1
	default:                                                   break;
	}
	return Local_U8_Reading;
}
    180c:	08 95       	ret

0000180e <M_DIO_Void_SetPinPullUpRes>:
void M_DIO_Void_SetPinPullUpRes(u8 Copy_U8_Num,u8 Copy_U8_State)
{
    180e:	28 2f       	mov	r18, r24
    1810:	36 2f       	mov	r19, r22
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
    1812:	6a e0       	ldi	r22, 0x0A	; 10
    1814:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodqi4>
    1818:	49 2f       	mov	r20, r25
	u8 Local_U8_Port = Copy_U8_Num / 10;
    181a:	82 2f       	mov	r24, r18
    181c:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodqi4>
			switch(Copy_U8_State)
    1820:	33 23       	and	r19, r19
    1822:	21 f0       	breq	.+8      	; 0x182c <M_DIO_Void_SetPinPullUpRes+0x1e>
    1824:	31 30       	cpi	r19, 0x01	; 1
    1826:	09 f0       	breq	.+2      	; 0x182a <M_DIO_Void_SetPinPullUpRes+0x1c>
    1828:	86 c0       	rjmp	.+268    	; 0x1936 <M_DIO_Void_SetPinPullUpRes+0x128>
    182a:	46 c0       	rjmp	.+140    	; 0x18b8 <M_DIO_Void_SetPinPullUpRes+0xaa>
			{
			case DISABLE :
				switch(Local_U8_Port)
    182c:	82 30       	cpi	r24, 0x02	; 2
    182e:	d1 f0       	breq	.+52     	; 0x1864 <M_DIO_Void_SetPinPullUpRes+0x56>
    1830:	83 30       	cpi	r24, 0x03	; 3
    1832:	20 f4       	brcc	.+8      	; 0x183c <M_DIO_Void_SetPinPullUpRes+0x2e>
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	09 f0       	breq	.+2      	; 0x183a <M_DIO_Void_SetPinPullUpRes+0x2c>
    1838:	7e c0       	rjmp	.+252    	; 0x1936 <M_DIO_Void_SetPinPullUpRes+0x128>
    183a:	06 c0       	rjmp	.+12     	; 0x1848 <M_DIO_Void_SetPinPullUpRes+0x3a>
    183c:	83 30       	cpi	r24, 0x03	; 3
    183e:	01 f1       	breq	.+64     	; 0x1880 <M_DIO_Void_SetPinPullUpRes+0x72>
    1840:	84 30       	cpi	r24, 0x04	; 4
    1842:	09 f0       	breq	.+2      	; 0x1846 <M_DIO_Void_SetPinPullUpRes+0x38>
    1844:	78 c0       	rjmp	.+240    	; 0x1936 <M_DIO_Void_SetPinPullUpRes+0x128>
    1846:	2a c0       	rjmp	.+84     	; 0x189c <M_DIO_Void_SetPinPullUpRes+0x8e>
				{
				case 1: CLR_BIT(PORTA_REG,Local_U8_Pin); break;
    1848:	eb e3       	ldi	r30, 0x3B	; 59
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	20 81       	ld	r18, Z
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <M_DIO_Void_SetPinPullUpRes+0x4a>
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	4a 95       	dec	r20
    185a:	e2 f7       	brpl	.-8      	; 0x1854 <M_DIO_Void_SetPinPullUpRes+0x46>
    185c:	80 95       	com	r24
    185e:	82 23       	and	r24, r18
    1860:	80 83       	st	Z, r24
    1862:	08 95       	ret
				case 2: CLR_BIT(PORTB_REG,Local_U8_Pin); break;
    1864:	e8 e3       	ldi	r30, 0x38	; 56
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	20 81       	ld	r18, Z
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <M_DIO_Void_SetPinPullUpRes+0x66>
    1870:	88 0f       	add	r24, r24
    1872:	99 1f       	adc	r25, r25
    1874:	4a 95       	dec	r20
    1876:	e2 f7       	brpl	.-8      	; 0x1870 <M_DIO_Void_SetPinPullUpRes+0x62>
    1878:	80 95       	com	r24
    187a:	82 23       	and	r24, r18
    187c:	80 83       	st	Z, r24
    187e:	08 95       	ret
				case 3: CLR_BIT(PORTC_REG,Local_U8_Pin); break;
    1880:	e5 e3       	ldi	r30, 0x35	; 53
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	20 81       	ld	r18, Z
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <M_DIO_Void_SetPinPullUpRes+0x82>
    188c:	88 0f       	add	r24, r24
    188e:	99 1f       	adc	r25, r25
    1890:	4a 95       	dec	r20
    1892:	e2 f7       	brpl	.-8      	; 0x188c <M_DIO_Void_SetPinPullUpRes+0x7e>
    1894:	80 95       	com	r24
    1896:	82 23       	and	r24, r18
    1898:	80 83       	st	Z, r24
    189a:	08 95       	ret
				case 4: CLR_BIT(PORTD_REG,Local_U8_Pin); break;
    189c:	e2 e3       	ldi	r30, 0x32	; 50
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	20 81       	ld	r18, Z
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <M_DIO_Void_SetPinPullUpRes+0x9e>
    18a8:	88 0f       	add	r24, r24
    18aa:	99 1f       	adc	r25, r25
    18ac:	4a 95       	dec	r20
    18ae:	e2 f7       	brpl	.-8      	; 0x18a8 <M_DIO_Void_SetPinPullUpRes+0x9a>
    18b0:	80 95       	com	r24
    18b2:	82 23       	and	r24, r18
    18b4:	80 83       	st	Z, r24
    18b6:	08 95       	ret
				default:                                 break;
				}
				break;
			case ENABLE:
				switch(Local_U8_Port)
    18b8:	82 30       	cpi	r24, 0x02	; 2
    18ba:	b9 f0       	breq	.+46     	; 0x18ea <M_DIO_Void_SetPinPullUpRes+0xdc>
    18bc:	83 30       	cpi	r24, 0x03	; 3
    18be:	18 f4       	brcc	.+6      	; 0x18c6 <M_DIO_Void_SetPinPullUpRes+0xb8>
    18c0:	81 30       	cpi	r24, 0x01	; 1
    18c2:	c9 f5       	brne	.+114    	; 0x1936 <M_DIO_Void_SetPinPullUpRes+0x128>
    18c4:	05 c0       	rjmp	.+10     	; 0x18d0 <M_DIO_Void_SetPinPullUpRes+0xc2>
    18c6:	83 30       	cpi	r24, 0x03	; 3
    18c8:	e9 f0       	breq	.+58     	; 0x1904 <M_DIO_Void_SetPinPullUpRes+0xf6>
    18ca:	84 30       	cpi	r24, 0x04	; 4
    18cc:	a1 f5       	brne	.+104    	; 0x1936 <M_DIO_Void_SetPinPullUpRes+0x128>
    18ce:	27 c0       	rjmp	.+78     	; 0x191e <M_DIO_Void_SetPinPullUpRes+0x110>
				{
				case 1: SET_BIT(PORTA_REG,Local_U8_Pin); break;
    18d0:	eb e3       	ldi	r30, 0x3B	; 59
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	20 81       	ld	r18, Z
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <M_DIO_Void_SetPinPullUpRes+0xd2>
    18dc:	88 0f       	add	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	4a 95       	dec	r20
    18e2:	e2 f7       	brpl	.-8      	; 0x18dc <M_DIO_Void_SetPinPullUpRes+0xce>
    18e4:	28 2b       	or	r18, r24
    18e6:	20 83       	st	Z, r18
    18e8:	08 95       	ret
				case 2: SET_BIT(PORTB_REG,Local_U8_Pin); break;
    18ea:	e8 e3       	ldi	r30, 0x38	; 56
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	20 81       	ld	r18, Z
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <M_DIO_Void_SetPinPullUpRes+0xec>
    18f6:	88 0f       	add	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	4a 95       	dec	r20
    18fc:	e2 f7       	brpl	.-8      	; 0x18f6 <M_DIO_Void_SetPinPullUpRes+0xe8>
    18fe:	28 2b       	or	r18, r24
    1900:	20 83       	st	Z, r18
    1902:	08 95       	ret
				case 3: SET_BIT(PORTC_REG,Local_U8_Pin); break;
    1904:	e5 e3       	ldi	r30, 0x35	; 53
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	20 81       	ld	r18, Z
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <M_DIO_Void_SetPinPullUpRes+0x106>
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	4a 95       	dec	r20
    1916:	e2 f7       	brpl	.-8      	; 0x1910 <M_DIO_Void_SetPinPullUpRes+0x102>
    1918:	28 2b       	or	r18, r24
    191a:	20 83       	st	Z, r18
    191c:	08 95       	ret
				case 4: SET_BIT(PORTD_REG,Local_U8_Pin); break;
    191e:	e2 e3       	ldi	r30, 0x32	; 50
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	20 81       	ld	r18, Z
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	02 c0       	rjmp	.+4      	; 0x192e <M_DIO_Void_SetPinPullUpRes+0x120>
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	4a 95       	dec	r20
    1930:	e2 f7       	brpl	.-8      	; 0x192a <M_DIO_Void_SetPinPullUpRes+0x11c>
    1932:	28 2b       	or	r18, r24
    1934:	20 83       	st	Z, r18
    1936:	08 95       	ret

00001938 <M_ADC_Void_ADCInit>:


void M_ADC_Void_ADCInit(void)
{
#if   ADC_V_REF_MODE   ==   AVCC
	CLR_BIT(ADMUX_REG,REFS1_BIT);
    1938:	e7 e2       	ldi	r30, 0x27	; 39
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	8f 77       	andi	r24, 0x7F	; 127
    1940:	80 83       	st	Z, r24
	SET_BIT(ADMUX_REG,REFS0_BIT);
    1942:	80 81       	ld	r24, Z
    1944:	80 64       	ori	r24, 0x40	; 64
    1946:	80 83       	st	Z, r24
	SET_BIT(ADMUX_REG,REFS1_BIT);
	SET_BIT(ADMUX_REG,REFS0_BIT);
#endif

	/* TO SELECT RIGHT ADDJUST */
	CLR_BIT(ADMUX_REG,ADLAR_BIT);
    1948:	80 81       	ld	r24, Z
    194a:	8f 7d       	andi	r24, 0xDF	; 223
    194c:	80 83       	st	Z, r24

#if   ADC_PRESCALER_DV   ==   128
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
    194e:	e6 e2       	ldi	r30, 0x26	; 38
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	84 60       	ori	r24, 0x04	; 4
    1956:	80 83       	st	Z, r24
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
    1958:	80 81       	ld	r24, Z
    195a:	82 60       	ori	r24, 0x02	; 2
    195c:	80 83       	st	Z, r24
	SET_BIT(ADCSRA_REG,ADPS0_BIT);
    195e:	80 81       	ld	r24, Z
    1960:	81 60       	ori	r24, 0x01	; 1
    1962:	80 83       	st	Z, r24
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
	CLR_BIT(ADCSRA_REG,ADPS0_BIT);
#endif

	SET_BIT(ADCSRA_REG,ADATE_BIT);
    1964:	80 81       	ld	r24, Z
    1966:	80 62       	ori	r24, 0x20	; 32
    1968:	80 83       	st	Z, r24
	/* TO ENABLE ADC CIRCUIT */
	SET_BIT(ADCSRA_REG,ADEN_BIT);
    196a:	80 81       	ld	r24, Z
    196c:	80 68       	ori	r24, 0x80	; 128
    196e:	80 83       	st	Z, r24
}
    1970:	08 95       	ret

00001972 <M_ADC_U16_ADCRead>:
u16  M_ADC_U16_ADCRead(u8 Copy_U8_AdcChannel)
{
	u32 Local_U32_Counter = 0;
	switch(Copy_U8_AdcChannel)
    1972:	81 30       	cpi	r24, 0x01	; 1
    1974:	d1 f0       	breq	.+52     	; 0x19aa <M_ADC_U16_ADCRead+0x38>
    1976:	81 30       	cpi	r24, 0x01	; 1
    1978:	30 f0       	brcs	.+12     	; 0x1986 <M_ADC_U16_ADCRead+0x14>
    197a:	82 30       	cpi	r24, 0x02	; 2
    197c:	41 f1       	breq	.+80     	; 0x19ce <M_ADC_U16_ADCRead+0x5c>
    197e:	83 30       	cpi	r24, 0x03	; 3
    1980:	09 f0       	breq	.+2      	; 0x1984 <M_ADC_U16_ADCRead+0x12>
    1982:	48 c0       	rjmp	.+144    	; 0x1a14 <M_ADC_U16_ADCRead+0xa2>
    1984:	36 c0       	rjmp	.+108    	; 0x19f2 <M_ADC_U16_ADCRead+0x80>
	{
	case ADC_CHANNEL_0:
		CLR_BIT(ADMUX_REG,MUX4_BIT);
    1986:	e7 e2       	ldi	r30, 0x27	; 39
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	8f 7e       	andi	r24, 0xEF	; 239
    198e:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX3_BIT);
    1990:	80 81       	ld	r24, Z
    1992:	87 7f       	andi	r24, 0xF7	; 247
    1994:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX2_BIT);
    1996:	80 81       	ld	r24, Z
    1998:	8b 7f       	andi	r24, 0xFB	; 251
    199a:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX1_BIT);
    199c:	80 81       	ld	r24, Z
    199e:	8d 7f       	andi	r24, 0xFD	; 253
    19a0:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX0_BIT);
    19a2:	80 81       	ld	r24, Z
    19a4:	8e 7f       	andi	r24, 0xFE	; 254
    19a6:	80 83       	st	Z, r24
    19a8:	35 c0       	rjmp	.+106    	; 0x1a14 <M_ADC_U16_ADCRead+0xa2>
		break;
	case ADC_CHANNEL_1:
		CLR_BIT(ADMUX_REG,MUX4_BIT);
    19aa:	e7 e2       	ldi	r30, 0x27	; 39
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	8f 7e       	andi	r24, 0xEF	; 239
    19b2:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX3_BIT);
    19b4:	80 81       	ld	r24, Z
    19b6:	87 7f       	andi	r24, 0xF7	; 247
    19b8:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX2_BIT);
    19ba:	80 81       	ld	r24, Z
    19bc:	8b 7f       	andi	r24, 0xFB	; 251
    19be:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX1_BIT);
    19c0:	80 81       	ld	r24, Z
    19c2:	8d 7f       	andi	r24, 0xFD	; 253
    19c4:	80 83       	st	Z, r24
		SET_BIT(ADMUX_REG,MUX0_BIT);
    19c6:	80 81       	ld	r24, Z
    19c8:	81 60       	ori	r24, 0x01	; 1
    19ca:	80 83       	st	Z, r24
    19cc:	23 c0       	rjmp	.+70     	; 0x1a14 <M_ADC_U16_ADCRead+0xa2>
		break;
	case ADC_CHANNEL_2:
		CLR_BIT(ADMUX_REG,MUX4_BIT);
    19ce:	e7 e2       	ldi	r30, 0x27	; 39
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	8f 7e       	andi	r24, 0xEF	; 239
    19d6:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX3_BIT);
    19d8:	80 81       	ld	r24, Z
    19da:	87 7f       	andi	r24, 0xF7	; 247
    19dc:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX2_BIT);
    19de:	80 81       	ld	r24, Z
    19e0:	8b 7f       	andi	r24, 0xFB	; 251
    19e2:	80 83       	st	Z, r24
		SET_BIT(ADMUX_REG,MUX1_BIT);
    19e4:	80 81       	ld	r24, Z
    19e6:	82 60       	ori	r24, 0x02	; 2
    19e8:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX0_BIT);
    19ea:	80 81       	ld	r24, Z
    19ec:	8e 7f       	andi	r24, 0xFE	; 254
    19ee:	80 83       	st	Z, r24
    19f0:	11 c0       	rjmp	.+34     	; 0x1a14 <M_ADC_U16_ADCRead+0xa2>
		break;
	case ADC_CHANNEL_3:
		CLR_BIT(ADMUX_REG,MUX4_BIT);
    19f2:	e7 e2       	ldi	r30, 0x27	; 39
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	8f 7e       	andi	r24, 0xEF	; 239
    19fa:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX3_BIT);
    19fc:	80 81       	ld	r24, Z
    19fe:	87 7f       	andi	r24, 0xF7	; 247
    1a00:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX2_BIT);
    1a02:	80 81       	ld	r24, Z
    1a04:	8b 7f       	andi	r24, 0xFB	; 251
    1a06:	80 83       	st	Z, r24
		SET_BIT(ADMUX_REG,MUX1_BIT);
    1a08:	80 81       	ld	r24, Z
    1a0a:	82 60       	ori	r24, 0x02	; 2
    1a0c:	80 83       	st	Z, r24
		SET_BIT(ADMUX_REG,MUX0_BIT);
    1a0e:	80 81       	ld	r24, Z
    1a10:	81 60       	ori	r24, 0x01	; 1
    1a12:	80 83       	st	Z, r24
		break;
	default:  break;
	}
	/* TO START CONVERTION */
	SET_BIT(ADCSRA_REG,ADSC_BIT);
    1a14:	e6 e2       	ldi	r30, 0x26	; 38
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	80 64       	ori	r24, 0x40	; 64
    1a1c:	80 83       	st	Z, r24
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	40 e0       	ldi	r20, 0x00	; 0
    1a24:	50 e0       	ldi	r21, 0x00	; 0

	while(Local_U32_Counter < POLLING_TIME)
	{
		Local_U32_Counter++;
		if(GET_BIT(ADCSRA_REG,ADIF_BIT) == ADC_CONVERSION_COMPLETE)
    1a26:	80 81       	ld	r24, Z
    1a28:	84 fd       	sbrc	r24, 4
    1a2a:	0c c0       	rjmp	.+24     	; 0x1a44 <M_ADC_U16_ADCRead+0xd2>
	/* TO START CONVERTION */
	SET_BIT(ADCSRA_REG,ADSC_BIT);

	while(Local_U32_Counter < POLLING_TIME)
	{
		Local_U32_Counter++;
    1a2c:	2f 5f       	subi	r18, 0xFF	; 255
    1a2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a30:	4f 4f       	sbci	r20, 0xFF	; 255
    1a32:	5f 4f       	sbci	r21, 0xFF	; 255
	default:  break;
	}
	/* TO START CONVERTION */
	SET_BIT(ADCSRA_REG,ADSC_BIT);

	while(Local_U32_Counter < POLLING_TIME)
    1a34:	20 30       	cpi	r18, 0x00	; 0
    1a36:	8d e2       	ldi	r24, 0x2D	; 45
    1a38:	38 07       	cpc	r19, r24
    1a3a:	81 e3       	ldi	r24, 0x31	; 49
    1a3c:	48 07       	cpc	r20, r24
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	58 07       	cpc	r21, r24
    1a42:	89 f7       	brne	.-30     	; 0x1a26 <M_ADC_U16_ADCRead+0xb4>
		if(GET_BIT(ADCSRA_REG,ADIF_BIT) == ADC_CONVERSION_COMPLETE)
		{
			break;
		}
	}
	return ADCL_REG;
    1a44:	24 b1       	in	r18, 0x04	; 4
    1a46:	35 b1       	in	r19, 0x05	; 5
}
    1a48:	82 2f       	mov	r24, r18
    1a4a:	93 2f       	mov	r25, r19
    1a4c:	08 95       	ret

00001a4e <H_SSD_Void_SSDWriteNumber>:
{
	M_DIO_Void_SetPinValue(SSD_EN, HIGH);
	_delay_ms(500);
	M_DIO_Void_SetPinValue(SSD_EN, LOW);
}
void H_SSD_Void_SSDWriteNumber(u8 Copy_U8_Number) {
    1a4e:	1f 93       	push	r17
    1a50:	18 2f       	mov	r17, r24


}

static void H_SSD_Void_SSDDigitDisplayTens(u8 Copy_U8_Number) {
	switch (Copy_U8_Number) {
    1a52:	6a e0       	ldi	r22, 0x0A	; 10
    1a54:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodqi4>
    1a58:	84 30       	cpi	r24, 0x04	; 4
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <H_SSD_Void_SSDWriteNumber+0x10>
    1a5c:	63 c0       	rjmp	.+198    	; 0x1b24 <H_SSD_Void_SSDWriteNumber+0xd6>
    1a5e:	85 30       	cpi	r24, 0x05	; 5
    1a60:	50 f4       	brcc	.+20     	; 0x1a76 <H_SSD_Void_SSDWriteNumber+0x28>
    1a62:	81 30       	cpi	r24, 0x01	; 1
    1a64:	61 f1       	breq	.+88     	; 0x1abe <H_SSD_Void_SSDWriteNumber+0x70>
    1a66:	81 30       	cpi	r24, 0x01	; 1
    1a68:	c8 f0       	brcs	.+50     	; 0x1a9c <H_SSD_Void_SSDWriteNumber+0x4e>
    1a6a:	82 30       	cpi	r24, 0x02	; 2
    1a6c:	c9 f1       	breq	.+114    	; 0x1ae0 <H_SSD_Void_SSDWriteNumber+0x92>
    1a6e:	83 30       	cpi	r24, 0x03	; 3
    1a70:	09 f0       	breq	.+2      	; 0x1a74 <H_SSD_Void_SSDWriteNumber+0x26>
    1a72:	bd c0       	rjmp	.+378    	; 0x1bee <H_SSD_Void_SSDWriteNumber+0x1a0>
    1a74:	46 c0       	rjmp	.+140    	; 0x1b02 <H_SSD_Void_SSDWriteNumber+0xb4>
    1a76:	87 30       	cpi	r24, 0x07	; 7
    1a78:	09 f4       	brne	.+2      	; 0x1a7c <H_SSD_Void_SSDWriteNumber+0x2e>
    1a7a:	87 c0       	rjmp	.+270    	; 0x1b8a <H_SSD_Void_SSDWriteNumber+0x13c>
    1a7c:	88 30       	cpi	r24, 0x08	; 8
    1a7e:	38 f4       	brcc	.+14     	; 0x1a8e <H_SSD_Void_SSDWriteNumber+0x40>
    1a80:	85 30       	cpi	r24, 0x05	; 5
    1a82:	09 f4       	brne	.+2      	; 0x1a86 <H_SSD_Void_SSDWriteNumber+0x38>
    1a84:	60 c0       	rjmp	.+192    	; 0x1b46 <H_SSD_Void_SSDWriteNumber+0xf8>
    1a86:	86 30       	cpi	r24, 0x06	; 6
    1a88:	09 f0       	breq	.+2      	; 0x1a8c <H_SSD_Void_SSDWriteNumber+0x3e>
    1a8a:	b1 c0       	rjmp	.+354    	; 0x1bee <H_SSD_Void_SSDWriteNumber+0x1a0>
    1a8c:	6d c0       	rjmp	.+218    	; 0x1b68 <H_SSD_Void_SSDWriteNumber+0x11a>
    1a8e:	88 30       	cpi	r24, 0x08	; 8
    1a90:	09 f4       	brne	.+2      	; 0x1a94 <H_SSD_Void_SSDWriteNumber+0x46>
    1a92:	8c c0       	rjmp	.+280    	; 0x1bac <H_SSD_Void_SSDWriteNumber+0x15e>
    1a94:	89 30       	cpi	r24, 0x09	; 9
    1a96:	09 f0       	breq	.+2      	; 0x1a9a <H_SSD_Void_SSDWriteNumber+0x4c>
    1a98:	aa c0       	rjmp	.+340    	; 0x1bee <H_SSD_Void_SSDWriteNumber+0x1a0>
    1a9a:	99 c0       	rjmp	.+306    	; 0x1bce <H_SSD_Void_SSDWriteNumber+0x180>
	case 0:
		M_DIO_Void_SetPinValue(SSD_A_PIN, LOW);
    1a9c:	8e e0       	ldi	r24, 0x0E	; 14
    1a9e:	60 e0       	ldi	r22, 0x00	; 0
    1aa0:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN, LOW);
    1aa4:	8f e0       	ldi	r24, 0x0F	; 15
    1aa6:	60 e0       	ldi	r22, 0x00	; 0
    1aa8:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN, LOW);
    1aac:	80 e1       	ldi	r24, 0x10	; 16
    1aae:	60 e0       	ldi	r22, 0x00	; 0
    1ab0:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN, LOW);
    1ab4:	81 e1       	ldi	r24, 0x11	; 17
    1ab6:	60 e0       	ldi	r22, 0x00	; 0
    1ab8:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    1abc:	98 c0       	rjmp	.+304    	; 0x1bee <H_SSD_Void_SSDWriteNumber+0x1a0>
		break;
	case 1:
		M_DIO_Void_SetPinValue(SSD_A_PIN, HIGH);
    1abe:	8e e0       	ldi	r24, 0x0E	; 14
    1ac0:	61 e0       	ldi	r22, 0x01	; 1
    1ac2:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN, LOW);
    1ac6:	8f e0       	ldi	r24, 0x0F	; 15
    1ac8:	60 e0       	ldi	r22, 0x00	; 0
    1aca:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN, LOW);
    1ace:	80 e1       	ldi	r24, 0x10	; 16
    1ad0:	60 e0       	ldi	r22, 0x00	; 0
    1ad2:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN, LOW);
    1ad6:	81 e1       	ldi	r24, 0x11	; 17
    1ad8:	60 e0       	ldi	r22, 0x00	; 0
    1ada:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    1ade:	87 c0       	rjmp	.+270    	; 0x1bee <H_SSD_Void_SSDWriteNumber+0x1a0>
		break;
	case 2:
		M_DIO_Void_SetPinValue(SSD_A_PIN, LOW);
    1ae0:	8e e0       	ldi	r24, 0x0E	; 14
    1ae2:	60 e0       	ldi	r22, 0x00	; 0
    1ae4:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN, HIGH);
    1ae8:	8f e0       	ldi	r24, 0x0F	; 15
    1aea:	61 e0       	ldi	r22, 0x01	; 1
    1aec:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN, LOW);
    1af0:	80 e1       	ldi	r24, 0x10	; 16
    1af2:	60 e0       	ldi	r22, 0x00	; 0
    1af4:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN, LOW);
    1af8:	81 e1       	ldi	r24, 0x11	; 17
    1afa:	60 e0       	ldi	r22, 0x00	; 0
    1afc:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    1b00:	76 c0       	rjmp	.+236    	; 0x1bee <H_SSD_Void_SSDWriteNumber+0x1a0>
		break;
	case 3:
		M_DIO_Void_SetPinValue(SSD_A_PIN, HIGH);
    1b02:	8e e0       	ldi	r24, 0x0E	; 14
    1b04:	61 e0       	ldi	r22, 0x01	; 1
    1b06:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN, HIGH);
    1b0a:	8f e0       	ldi	r24, 0x0F	; 15
    1b0c:	61 e0       	ldi	r22, 0x01	; 1
    1b0e:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN, LOW);
    1b12:	80 e1       	ldi	r24, 0x10	; 16
    1b14:	60 e0       	ldi	r22, 0x00	; 0
    1b16:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN, LOW);
    1b1a:	81 e1       	ldi	r24, 0x11	; 17
    1b1c:	60 e0       	ldi	r22, 0x00	; 0
    1b1e:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    1b22:	65 c0       	rjmp	.+202    	; 0x1bee <H_SSD_Void_SSDWriteNumber+0x1a0>
		break;
	case 4:
		M_DIO_Void_SetPinValue(SSD_A_PIN, LOW);
    1b24:	8e e0       	ldi	r24, 0x0E	; 14
    1b26:	60 e0       	ldi	r22, 0x00	; 0
    1b28:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN, LOW);
    1b2c:	8f e0       	ldi	r24, 0x0F	; 15
    1b2e:	60 e0       	ldi	r22, 0x00	; 0
    1b30:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN, HIGH);
    1b34:	80 e1       	ldi	r24, 0x10	; 16
    1b36:	61 e0       	ldi	r22, 0x01	; 1
    1b38:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN, LOW);
    1b3c:	81 e1       	ldi	r24, 0x11	; 17
    1b3e:	60 e0       	ldi	r22, 0x00	; 0
    1b40:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    1b44:	54 c0       	rjmp	.+168    	; 0x1bee <H_SSD_Void_SSDWriteNumber+0x1a0>
		break;
	case 5:
		M_DIO_Void_SetPinValue(SSD_A_PIN, HIGH);
    1b46:	8e e0       	ldi	r24, 0x0E	; 14
    1b48:	61 e0       	ldi	r22, 0x01	; 1
    1b4a:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN, LOW);
    1b4e:	8f e0       	ldi	r24, 0x0F	; 15
    1b50:	60 e0       	ldi	r22, 0x00	; 0
    1b52:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN, HIGH);
    1b56:	80 e1       	ldi	r24, 0x10	; 16
    1b58:	61 e0       	ldi	r22, 0x01	; 1
    1b5a:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN, LOW);
    1b5e:	81 e1       	ldi	r24, 0x11	; 17
    1b60:	60 e0       	ldi	r22, 0x00	; 0
    1b62:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    1b66:	43 c0       	rjmp	.+134    	; 0x1bee <H_SSD_Void_SSDWriteNumber+0x1a0>
		break;
	case 6:
		M_DIO_Void_SetPinValue(SSD_A_PIN, LOW);
    1b68:	8e e0       	ldi	r24, 0x0E	; 14
    1b6a:	60 e0       	ldi	r22, 0x00	; 0
    1b6c:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN, HIGH);
    1b70:	8f e0       	ldi	r24, 0x0F	; 15
    1b72:	61 e0       	ldi	r22, 0x01	; 1
    1b74:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN, HIGH);
    1b78:	80 e1       	ldi	r24, 0x10	; 16
    1b7a:	61 e0       	ldi	r22, 0x01	; 1
    1b7c:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN, LOW);
    1b80:	81 e1       	ldi	r24, 0x11	; 17
    1b82:	60 e0       	ldi	r22, 0x00	; 0
    1b84:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    1b88:	32 c0       	rjmp	.+100    	; 0x1bee <H_SSD_Void_SSDWriteNumber+0x1a0>
		break;
	case 7:
		M_DIO_Void_SetPinValue(SSD_A_PIN, HIGH);
    1b8a:	8e e0       	ldi	r24, 0x0E	; 14
    1b8c:	61 e0       	ldi	r22, 0x01	; 1
    1b8e:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN, HIGH);
    1b92:	8f e0       	ldi	r24, 0x0F	; 15
    1b94:	61 e0       	ldi	r22, 0x01	; 1
    1b96:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN, HIGH);
    1b9a:	80 e1       	ldi	r24, 0x10	; 16
    1b9c:	61 e0       	ldi	r22, 0x01	; 1
    1b9e:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN, LOW);
    1ba2:	81 e1       	ldi	r24, 0x11	; 17
    1ba4:	60 e0       	ldi	r22, 0x00	; 0
    1ba6:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    1baa:	21 c0       	rjmp	.+66     	; 0x1bee <H_SSD_Void_SSDWriteNumber+0x1a0>
		break;
	case 8:
		M_DIO_Void_SetPinValue(SSD_A_PIN, LOW);
    1bac:	8e e0       	ldi	r24, 0x0E	; 14
    1bae:	60 e0       	ldi	r22, 0x00	; 0
    1bb0:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN, LOW);
    1bb4:	8f e0       	ldi	r24, 0x0F	; 15
    1bb6:	60 e0       	ldi	r22, 0x00	; 0
    1bb8:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN, LOW);
    1bbc:	80 e1       	ldi	r24, 0x10	; 16
    1bbe:	60 e0       	ldi	r22, 0x00	; 0
    1bc0:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN, HIGH);
    1bc4:	81 e1       	ldi	r24, 0x11	; 17
    1bc6:	61 e0       	ldi	r22, 0x01	; 1
    1bc8:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    1bcc:	10 c0       	rjmp	.+32     	; 0x1bee <H_SSD_Void_SSDWriteNumber+0x1a0>
		break;
	case 9:
		M_DIO_Void_SetPinValue(SSD_A_PIN, HIGH);
    1bce:	8e e0       	ldi	r24, 0x0E	; 14
    1bd0:	61 e0       	ldi	r22, 0x01	; 1
    1bd2:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN, LOW);
    1bd6:	8f e0       	ldi	r24, 0x0F	; 15
    1bd8:	60 e0       	ldi	r22, 0x00	; 0
    1bda:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN, LOW);
    1bde:	80 e1       	ldi	r24, 0x10	; 16
    1be0:	60 e0       	ldi	r22, 0x00	; 0
    1be2:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN, HIGH);
    1be6:	81 e1       	ldi	r24, 0x11	; 17
    1be8:	61 e0       	ldi	r22, 0x01	; 1
    1bea:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
	default:
		break;
	}
}
static void H_SSD_Void_SSDDigitDisplayUnits(u8 Copy_U8_Number) {
	switch (Copy_U8_Number) {
    1bee:	81 2f       	mov	r24, r17
    1bf0:	6a e0       	ldi	r22, 0x0A	; 10
    1bf2:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodqi4>
    1bf6:	94 30       	cpi	r25, 0x04	; 4
    1bf8:	09 f4       	brne	.+2      	; 0x1bfc <H_SSD_Void_SSDWriteNumber+0x1ae>
    1bfa:	63 c0       	rjmp	.+198    	; 0x1cc2 <H_SSD_Void_SSDWriteNumber+0x274>
    1bfc:	95 30       	cpi	r25, 0x05	; 5
    1bfe:	50 f4       	brcc	.+20     	; 0x1c14 <H_SSD_Void_SSDWriteNumber+0x1c6>
    1c00:	91 30       	cpi	r25, 0x01	; 1
    1c02:	61 f1       	breq	.+88     	; 0x1c5c <H_SSD_Void_SSDWriteNumber+0x20e>
    1c04:	91 30       	cpi	r25, 0x01	; 1
    1c06:	c8 f0       	brcs	.+50     	; 0x1c3a <H_SSD_Void_SSDWriteNumber+0x1ec>
    1c08:	92 30       	cpi	r25, 0x02	; 2
    1c0a:	c9 f1       	breq	.+114    	; 0x1c7e <H_SSD_Void_SSDWriteNumber+0x230>
    1c0c:	93 30       	cpi	r25, 0x03	; 3
    1c0e:	09 f0       	breq	.+2      	; 0x1c12 <H_SSD_Void_SSDWriteNumber+0x1c4>
    1c10:	bd c0       	rjmp	.+378    	; 0x1d8c <H_SSD_Void_SSDWriteNumber+0x33e>
    1c12:	46 c0       	rjmp	.+140    	; 0x1ca0 <H_SSD_Void_SSDWriteNumber+0x252>
    1c14:	97 30       	cpi	r25, 0x07	; 7
    1c16:	09 f4       	brne	.+2      	; 0x1c1a <H_SSD_Void_SSDWriteNumber+0x1cc>
    1c18:	87 c0       	rjmp	.+270    	; 0x1d28 <H_SSD_Void_SSDWriteNumber+0x2da>
    1c1a:	98 30       	cpi	r25, 0x08	; 8
    1c1c:	38 f4       	brcc	.+14     	; 0x1c2c <H_SSD_Void_SSDWriteNumber+0x1de>
    1c1e:	95 30       	cpi	r25, 0x05	; 5
    1c20:	09 f4       	brne	.+2      	; 0x1c24 <H_SSD_Void_SSDWriteNumber+0x1d6>
    1c22:	60 c0       	rjmp	.+192    	; 0x1ce4 <H_SSD_Void_SSDWriteNumber+0x296>
    1c24:	96 30       	cpi	r25, 0x06	; 6
    1c26:	09 f0       	breq	.+2      	; 0x1c2a <H_SSD_Void_SSDWriteNumber+0x1dc>
    1c28:	b1 c0       	rjmp	.+354    	; 0x1d8c <H_SSD_Void_SSDWriteNumber+0x33e>
    1c2a:	6d c0       	rjmp	.+218    	; 0x1d06 <H_SSD_Void_SSDWriteNumber+0x2b8>
    1c2c:	98 30       	cpi	r25, 0x08	; 8
    1c2e:	09 f4       	brne	.+2      	; 0x1c32 <H_SSD_Void_SSDWriteNumber+0x1e4>
    1c30:	8c c0       	rjmp	.+280    	; 0x1d4a <H_SSD_Void_SSDWriteNumber+0x2fc>
    1c32:	99 30       	cpi	r25, 0x09	; 9
    1c34:	09 f0       	breq	.+2      	; 0x1c38 <H_SSD_Void_SSDWriteNumber+0x1ea>
    1c36:	aa c0       	rjmp	.+340    	; 0x1d8c <H_SSD_Void_SSDWriteNumber+0x33e>
    1c38:	99 c0       	rjmp	.+306    	; 0x1d6c <H_SSD_Void_SSDWriteNumber+0x31e>
	case 0:
		M_DIO_Void_SetPinValue(SSD_E_PIN, LOW);
    1c3a:	88 e1       	ldi	r24, 0x18	; 24
    1c3c:	60 e0       	ldi	r22, 0x00	; 0
    1c3e:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_F_PIN, LOW);
    1c42:	89 e1       	ldi	r24, 0x19	; 25
    1c44:	60 e0       	ldi	r22, 0x00	; 0
    1c46:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_G_PIN, LOW);
    1c4a:	8a e1       	ldi	r24, 0x1A	; 26
    1c4c:	60 e0       	ldi	r22, 0x00	; 0
    1c4e:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_H_PIN, LOW);
    1c52:	8b e1       	ldi	r24, 0x1B	; 27
    1c54:	60 e0       	ldi	r22, 0x00	; 0
    1c56:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    1c5a:	98 c0       	rjmp	.+304    	; 0x1d8c <H_SSD_Void_SSDWriteNumber+0x33e>
		break;
	case 1:
		M_DIO_Void_SetPinValue(SSD_E_PIN, HIGH);
    1c5c:	88 e1       	ldi	r24, 0x18	; 24
    1c5e:	61 e0       	ldi	r22, 0x01	; 1
    1c60:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_F_PIN, LOW);
    1c64:	89 e1       	ldi	r24, 0x19	; 25
    1c66:	60 e0       	ldi	r22, 0x00	; 0
    1c68:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_G_PIN, LOW);
    1c6c:	8a e1       	ldi	r24, 0x1A	; 26
    1c6e:	60 e0       	ldi	r22, 0x00	; 0
    1c70:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_H_PIN, LOW);
    1c74:	8b e1       	ldi	r24, 0x1B	; 27
    1c76:	60 e0       	ldi	r22, 0x00	; 0
    1c78:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    1c7c:	87 c0       	rjmp	.+270    	; 0x1d8c <H_SSD_Void_SSDWriteNumber+0x33e>
		break;
	case 2:
		M_DIO_Void_SetPinValue(SSD_E_PIN, LOW);
    1c7e:	88 e1       	ldi	r24, 0x18	; 24
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    1c82:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_F_PIN, HIGH);
    1c86:	89 e1       	ldi	r24, 0x19	; 25
    1c88:	61 e0       	ldi	r22, 0x01	; 1
    1c8a:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_G_PIN, LOW);
    1c8e:	8a e1       	ldi	r24, 0x1A	; 26
    1c90:	60 e0       	ldi	r22, 0x00	; 0
    1c92:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_H_PIN, LOW);
    1c96:	8b e1       	ldi	r24, 0x1B	; 27
    1c98:	60 e0       	ldi	r22, 0x00	; 0
    1c9a:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    1c9e:	76 c0       	rjmp	.+236    	; 0x1d8c <H_SSD_Void_SSDWriteNumber+0x33e>
		break;
	case 3:
		M_DIO_Void_SetPinValue(SSD_E_PIN, HIGH);
    1ca0:	88 e1       	ldi	r24, 0x18	; 24
    1ca2:	61 e0       	ldi	r22, 0x01	; 1
    1ca4:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_F_PIN, HIGH);
    1ca8:	89 e1       	ldi	r24, 0x19	; 25
    1caa:	61 e0       	ldi	r22, 0x01	; 1
    1cac:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_G_PIN, LOW);
    1cb0:	8a e1       	ldi	r24, 0x1A	; 26
    1cb2:	60 e0       	ldi	r22, 0x00	; 0
    1cb4:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_H_PIN, LOW);
    1cb8:	8b e1       	ldi	r24, 0x1B	; 27
    1cba:	60 e0       	ldi	r22, 0x00	; 0
    1cbc:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    1cc0:	65 c0       	rjmp	.+202    	; 0x1d8c <H_SSD_Void_SSDWriteNumber+0x33e>
		break;
	case 4:
		M_DIO_Void_SetPinValue(SSD_E_PIN, LOW);
    1cc2:	88 e1       	ldi	r24, 0x18	; 24
    1cc4:	60 e0       	ldi	r22, 0x00	; 0
    1cc6:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_F_PIN, LOW);
    1cca:	89 e1       	ldi	r24, 0x19	; 25
    1ccc:	60 e0       	ldi	r22, 0x00	; 0
    1cce:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_G_PIN, HIGH);
    1cd2:	8a e1       	ldi	r24, 0x1A	; 26
    1cd4:	61 e0       	ldi	r22, 0x01	; 1
    1cd6:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_H_PIN, LOW);
    1cda:	8b e1       	ldi	r24, 0x1B	; 27
    1cdc:	60 e0       	ldi	r22, 0x00	; 0
    1cde:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    1ce2:	54 c0       	rjmp	.+168    	; 0x1d8c <H_SSD_Void_SSDWriteNumber+0x33e>
		break;
	case 5:
		M_DIO_Void_SetPinValue(SSD_E_PIN, HIGH);
    1ce4:	88 e1       	ldi	r24, 0x18	; 24
    1ce6:	61 e0       	ldi	r22, 0x01	; 1
    1ce8:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_F_PIN, LOW);
    1cec:	89 e1       	ldi	r24, 0x19	; 25
    1cee:	60 e0       	ldi	r22, 0x00	; 0
    1cf0:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_G_PIN, HIGH);
    1cf4:	8a e1       	ldi	r24, 0x1A	; 26
    1cf6:	61 e0       	ldi	r22, 0x01	; 1
    1cf8:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_H_PIN, LOW);
    1cfc:	8b e1       	ldi	r24, 0x1B	; 27
    1cfe:	60 e0       	ldi	r22, 0x00	; 0
    1d00:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    1d04:	43 c0       	rjmp	.+134    	; 0x1d8c <H_SSD_Void_SSDWriteNumber+0x33e>
		break;
	case 6:
		M_DIO_Void_SetPinValue(SSD_E_PIN, LOW);
    1d06:	88 e1       	ldi	r24, 0x18	; 24
    1d08:	60 e0       	ldi	r22, 0x00	; 0
    1d0a:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_F_PIN, HIGH);
    1d0e:	89 e1       	ldi	r24, 0x19	; 25
    1d10:	61 e0       	ldi	r22, 0x01	; 1
    1d12:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_G_PIN, HIGH);
    1d16:	8a e1       	ldi	r24, 0x1A	; 26
    1d18:	61 e0       	ldi	r22, 0x01	; 1
    1d1a:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_H_PIN, LOW);
    1d1e:	8b e1       	ldi	r24, 0x1B	; 27
    1d20:	60 e0       	ldi	r22, 0x00	; 0
    1d22:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    1d26:	32 c0       	rjmp	.+100    	; 0x1d8c <H_SSD_Void_SSDWriteNumber+0x33e>
		break;
	case 7:
		M_DIO_Void_SetPinValue(SSD_E_PIN, HIGH);
    1d28:	88 e1       	ldi	r24, 0x18	; 24
    1d2a:	61 e0       	ldi	r22, 0x01	; 1
    1d2c:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_F_PIN, HIGH);
    1d30:	89 e1       	ldi	r24, 0x19	; 25
    1d32:	61 e0       	ldi	r22, 0x01	; 1
    1d34:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_G_PIN, HIGH);
    1d38:	8a e1       	ldi	r24, 0x1A	; 26
    1d3a:	61 e0       	ldi	r22, 0x01	; 1
    1d3c:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_H_PIN, LOW);
    1d40:	8b e1       	ldi	r24, 0x1B	; 27
    1d42:	60 e0       	ldi	r22, 0x00	; 0
    1d44:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    1d48:	21 c0       	rjmp	.+66     	; 0x1d8c <H_SSD_Void_SSDWriteNumber+0x33e>
		break;
	case 8:
		M_DIO_Void_SetPinValue(SSD_E_PIN, LOW);
    1d4a:	88 e1       	ldi	r24, 0x18	; 24
    1d4c:	60 e0       	ldi	r22, 0x00	; 0
    1d4e:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_F_PIN, LOW);
    1d52:	89 e1       	ldi	r24, 0x19	; 25
    1d54:	60 e0       	ldi	r22, 0x00	; 0
    1d56:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_G_PIN, LOW);
    1d5a:	8a e1       	ldi	r24, 0x1A	; 26
    1d5c:	60 e0       	ldi	r22, 0x00	; 0
    1d5e:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_H_PIN, HIGH);
    1d62:	8b e1       	ldi	r24, 0x1B	; 27
    1d64:	61 e0       	ldi	r22, 0x01	; 1
    1d66:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    1d6a:	10 c0       	rjmp	.+32     	; 0x1d8c <H_SSD_Void_SSDWriteNumber+0x33e>
		break;
	case 9:
		M_DIO_Void_SetPinValue(SSD_E_PIN, HIGH);
    1d6c:	88 e1       	ldi	r24, 0x18	; 24
    1d6e:	61 e0       	ldi	r22, 0x01	; 1
    1d70:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_F_PIN, LOW);
    1d74:	89 e1       	ldi	r24, 0x19	; 25
    1d76:	60 e0       	ldi	r22, 0x00	; 0
    1d78:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_G_PIN, LOW);
    1d7c:	8a e1       	ldi	r24, 0x1A	; 26
    1d7e:	60 e0       	ldi	r22, 0x00	; 0
    1d80:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_H_PIN, HIGH);
    1d84:	8b e1       	ldi	r24, 0x1B	; 27
    1d86:	61 e0       	ldi	r22, 0x01	; 1
    1d88:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
		u8 Local_U8_Tens = Copy_U8_Number / 10;
		H_SSD_Void_SSDDigitDisplayTens(Local_U8_Tens);
		H_SSD_Void_SSDDigitDisplayUnits(Local_U8_Ones);


}
    1d8c:	1f 91       	pop	r17
    1d8e:	08 95       	ret

00001d90 <H_SSD_Void_SSDBlink>:
	M_DIO_Void_SetPinValue(SSD_EN, LOW);

}
void H_SSD_Void_SSDBlink()
{
	M_DIO_Void_SetPinValue(SSD_EN, HIGH);
    1d90:	87 e1       	ldi	r24, 0x17	; 23
    1d92:	61 e0       	ldi	r22, 0x01	; 1
    1d94:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    1d98:	28 e8       	ldi	r18, 0x88	; 136
    1d9a:	33 e1       	ldi	r19, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d9c:	40 e9       	ldi	r20, 0x90	; 144
    1d9e:	51 e0       	ldi	r21, 0x01	; 1
    1da0:	ca 01       	movw	r24, r20
    1da2:	01 97       	sbiw	r24, 0x01	; 1
    1da4:	f1 f7       	brne	.-4      	; 0x1da2 <H_SSD_Void_SSDBlink+0x12>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da6:	21 50       	subi	r18, 0x01	; 1
    1da8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1daa:	d1 f7       	brne	.-12     	; 0x1da0 <H_SSD_Void_SSDBlink+0x10>
	_delay_ms(500);
	M_DIO_Void_SetPinValue(SSD_EN, LOW);
    1dac:	87 e1       	ldi	r24, 0x17	; 23
    1dae:	60 e0       	ldi	r22, 0x00	; 0
    1db0:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
}
    1db4:	08 95       	ret

00001db6 <H_SSD_Void_SSDInit>:

#include "SSD_Interface.h"
#include "SSD_Private.h"

void H_SSD_Void_SSDInit(void) {
	M_DIO_Void_SetPinDirection(SSD_A_PIN, OUTPUT);
    1db6:	8e e0       	ldi	r24, 0x0E	; 14
    1db8:	61 e0       	ldi	r22, 0x01	; 1
    1dba:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_B_PIN, OUTPUT);
    1dbe:	8f e0       	ldi	r24, 0x0F	; 15
    1dc0:	61 e0       	ldi	r22, 0x01	; 1
    1dc2:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_C_PIN, OUTPUT);
    1dc6:	80 e1       	ldi	r24, 0x10	; 16
    1dc8:	61 e0       	ldi	r22, 0x01	; 1
    1dca:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_D_PIN, OUTPUT);
    1dce:	81 e1       	ldi	r24, 0x11	; 17
    1dd0:	61 e0       	ldi	r22, 0x01	; 1
    1dd2:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_E_PIN, OUTPUT);
    1dd6:	88 e1       	ldi	r24, 0x18	; 24
    1dd8:	61 e0       	ldi	r22, 0x01	; 1
    1dda:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_F_PIN, OUTPUT);
    1dde:	89 e1       	ldi	r24, 0x19	; 25
    1de0:	61 e0       	ldi	r22, 0x01	; 1
    1de2:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_G_PIN, OUTPUT);
    1de6:	8a e1       	ldi	r24, 0x1A	; 26
    1de8:	61 e0       	ldi	r22, 0x01	; 1
    1dea:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_H_PIN, OUTPUT);
    1dee:	8b e1       	ldi	r24, 0x1B	; 27
    1df0:	61 e0       	ldi	r22, 0x01	; 1
    1df2:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_EN, OUTPUT);
    1df6:	87 e1       	ldi	r24, 0x17	; 23
    1df8:	61 e0       	ldi	r22, 0x01	; 1
    1dfa:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinValue(SSD_EN, LOW);
    1dfe:	87 e1       	ldi	r24, 0x17	; 23
    1e00:	60 e0       	ldi	r22, 0x00	; 0
    1e02:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>

}
    1e06:	08 95       	ret

00001e08 <H_LM35_Void_LM35Read>:
	M_ADC_Void_ADCInit();
}
u16  H_LM35_Void_LM35Read(void)
{

	 u16 Local_U16_AdcValue = M_ADC_U16_ADCRead(LM35_PIN);
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <M_ADC_U16_ADCRead>
    1e0e:	a0 e0       	ldi	r26, 0x00	; 0
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	bc 01       	movw	r22, r24
    1e14:	cd 01       	movw	r24, r26
    1e16:	24 ef       	ldi	r18, 0xF4	; 244
    1e18:	31 e0       	ldi	r19, 0x01	; 1
    1e1a:	40 e0       	ldi	r20, 0x00	; 0
    1e1c:	50 e0       	ldi	r21, 0x00	; 0
    1e1e:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsi3>
    1e22:	2f ef       	ldi	r18, 0xFF	; 255
    1e24:	33 e0       	ldi	r19, 0x03	; 3
    1e26:	40 e0       	ldi	r20, 0x00	; 0
    1e28:	50 e0       	ldi	r21, 0x00	; 0
    1e2a:	0e 94 9e 12 	call	0x253c	; 0x253c <__udivmodsi4>
    1e2e:	82 2f       	mov	r24, r18
    1e30:	93 2f       	mov	r25, r19

	 u16 temp               = ((u32)Local_U16_AdcValue * 500) / 1023;

	 return temp;
}
    1e32:	08 95       	ret

00001e34 <H_LM35_Void_LM35Init>:

#include "LM35_Interface.h"

void H_LM35_Void_LM35Init(void)
{
	M_ADC_Void_ADCInit();
    1e34:	0e 94 9c 0c 	call	0x1938	; 0x1938 <M_ADC_Void_ADCInit>
}
    1e38:	08 95       	ret

00001e3a <H_LED_Void_LedTog>:
	default:                                         break;
	}
}
void H_LED_Void_LedTog(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
    1e3a:	81 30       	cpi	r24, 0x01	; 1
    1e3c:	49 f0       	breq	.+18     	; 0x1e50 <H_LED_Void_LedTog+0x16>
    1e3e:	81 30       	cpi	r24, 0x01	; 1
    1e40:	18 f0       	brcs	.+6      	; 0x1e48 <H_LED_Void_LedTog+0xe>
    1e42:	82 30       	cpi	r24, 0x02	; 2
    1e44:	61 f4       	brne	.+24     	; 0x1e5e <H_LED_Void_LedTog+0x24>
    1e46:	08 c0       	rjmp	.+16     	; 0x1e58 <H_LED_Void_LedTog+0x1e>
	{
	case LED0: M_DIO_Void_TogPin(LED0_PIN); break;
    1e48:	80 e2       	ldi	r24, 0x20	; 32
    1e4a:	0e 94 86 0b 	call	0x170c	; 0x170c <M_DIO_Void_TogPin>
    1e4e:	08 95       	ret
	case LED1: M_DIO_Void_TogPin(LED1_PIN); break;
    1e50:	85 e2       	ldi	r24, 0x25	; 37
    1e52:	0e 94 86 0b 	call	0x170c	; 0x170c <M_DIO_Void_TogPin>
    1e56:	08 95       	ret
	case LED2: M_DIO_Void_TogPin(LED2_PIN); break;
    1e58:	8b e2       	ldi	r24, 0x2B	; 43
    1e5a:	0e 94 86 0b 	call	0x170c	; 0x170c <M_DIO_Void_TogPin>
    1e5e:	08 95       	ret

00001e60 <H_LED_Void_LedSetOff>:
	default:                                          break;
	}
}
void H_LED_Void_LedSetOff(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
    1e60:	81 30       	cpi	r24, 0x01	; 1
    1e62:	51 f0       	breq	.+20     	; 0x1e78 <H_LED_Void_LedSetOff+0x18>
    1e64:	81 30       	cpi	r24, 0x01	; 1
    1e66:	18 f0       	brcs	.+6      	; 0x1e6e <H_LED_Void_LedSetOff+0xe>
    1e68:	82 30       	cpi	r24, 0x02	; 2
    1e6a:	79 f4       	brne	.+30     	; 0x1e8a <H_LED_Void_LedSetOff+0x2a>
    1e6c:	0a c0       	rjmp	.+20     	; 0x1e82 <H_LED_Void_LedSetOff+0x22>
	{
	case LED0: M_DIO_Void_SetPinValue(LED0_PIN,LOW); break;
    1e6e:	80 e2       	ldi	r24, 0x20	; 32
    1e70:	60 e0       	ldi	r22, 0x00	; 0
    1e72:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    1e76:	08 95       	ret
	case LED1: M_DIO_Void_SetPinValue(LED1_PIN,LOW); break;
    1e78:	85 e2       	ldi	r24, 0x25	; 37
    1e7a:	60 e0       	ldi	r22, 0x00	; 0
    1e7c:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    1e80:	08 95       	ret
	case LED2: M_DIO_Void_SetPinValue(LED2_PIN,LOW); break;
    1e82:	8b e2       	ldi	r24, 0x2B	; 43
    1e84:	60 e0       	ldi	r22, 0x00	; 0
    1e86:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    1e8a:	08 95       	ret

00001e8c <H_LED_Void_LedSetOn>:
	default:                                                break;
	}
}
void H_LED_Void_LedSetOn(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
    1e8c:	81 30       	cpi	r24, 0x01	; 1
    1e8e:	61 f0       	breq	.+24     	; 0x1ea8 <H_LED_Void_LedSetOn+0x1c>
    1e90:	81 30       	cpi	r24, 0x01	; 1
    1e92:	28 f0       	brcs	.+10     	; 0x1e9e <H_LED_Void_LedSetOn+0x12>
    1e94:	82 30       	cpi	r24, 0x02	; 2
    1e96:	69 f0       	breq	.+26     	; 0x1eb2 <H_LED_Void_LedSetOn+0x26>
    1e98:	83 30       	cpi	r24, 0x03	; 3
    1e9a:	a1 f4       	brne	.+40     	; 0x1ec4 <H_LED_Void_LedSetOn+0x38>
    1e9c:	0f c0       	rjmp	.+30     	; 0x1ebc <H_LED_Void_LedSetOn+0x30>
	{
	case LED0: M_DIO_Void_SetPinValue(LED0_PIN,HIGH); break;
    1e9e:	80 e2       	ldi	r24, 0x20	; 32
    1ea0:	61 e0       	ldi	r22, 0x01	; 1
    1ea2:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    1ea6:	08 95       	ret
	case LED1: M_DIO_Void_SetPinValue(LED1_PIN,HIGH); break;
    1ea8:	85 e2       	ldi	r24, 0x25	; 37
    1eaa:	61 e0       	ldi	r22, 0x01	; 1
    1eac:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    1eb0:	08 95       	ret
	case LED2: M_DIO_Void_SetPinValue(LED2_PIN,HIGH); break;
    1eb2:	8b e2       	ldi	r24, 0x2B	; 43
    1eb4:	61 e0       	ldi	r22, 0x01	; 1
    1eb6:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    1eba:	08 95       	ret
	case LED3: M_DIO_Void_SetPinValue(LED3_PIN,HIGH); break;
    1ebc:	8c e0       	ldi	r24, 0x0C	; 12
    1ebe:	61 e0       	ldi	r22, 0x01	; 1
    1ec0:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    1ec4:	08 95       	ret

00001ec6 <H_LED_Void_LedInit>:
#include "LED_Interface.h"


void H_LED_Void_LedInit(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
    1ec6:	81 30       	cpi	r24, 0x01	; 1
    1ec8:	61 f0       	breq	.+24     	; 0x1ee2 <H_LED_Void_LedInit+0x1c>
    1eca:	81 30       	cpi	r24, 0x01	; 1
    1ecc:	28 f0       	brcs	.+10     	; 0x1ed8 <H_LED_Void_LedInit+0x12>
    1ece:	82 30       	cpi	r24, 0x02	; 2
    1ed0:	69 f0       	breq	.+26     	; 0x1eec <H_LED_Void_LedInit+0x26>
    1ed2:	83 30       	cpi	r24, 0x03	; 3
    1ed4:	a1 f4       	brne	.+40     	; 0x1efe <H_LED_Void_LedInit+0x38>
    1ed6:	0f c0       	rjmp	.+30     	; 0x1ef6 <H_LED_Void_LedInit+0x30>
	{
	case LED0: M_DIO_Void_SetPinDirection(LED0_PIN,OUTPUT); break;
    1ed8:	80 e2       	ldi	r24, 0x20	; 32
    1eda:	61 e0       	ldi	r22, 0x01	; 1
    1edc:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <M_DIO_Void_SetPinDirection>
    1ee0:	08 95       	ret
	case LED1: M_DIO_Void_SetPinDirection(LED1_PIN,OUTPUT); break;
    1ee2:	85 e2       	ldi	r24, 0x25	; 37
    1ee4:	61 e0       	ldi	r22, 0x01	; 1
    1ee6:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <M_DIO_Void_SetPinDirection>
    1eea:	08 95       	ret
	case LED2: M_DIO_Void_SetPinDirection(LED2_PIN,OUTPUT); break;
    1eec:	8b e2       	ldi	r24, 0x2B	; 43
    1eee:	61 e0       	ldi	r22, 0x01	; 1
    1ef0:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <M_DIO_Void_SetPinDirection>
    1ef4:	08 95       	ret
	case LED3: M_DIO_Void_SetPinDirection(LED3_PIN,OUTPUT); break;
    1ef6:	8c e0       	ldi	r24, 0x0C	; 12
    1ef8:	61 e0       	ldi	r22, 0x01	; 1
    1efa:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <M_DIO_Void_SetPinDirection>
    1efe:	08 95       	ret

00001f00 <H_LCD_Void_SetLCDPins>:
{
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR);
}

static void H_LCD_Void_SetLCDPins(u8 Copy_U8_Pins)
{
    1f00:	1f 93       	push	r17
    1f02:	18 2f       	mov	r17, r24
	M_DIO_Void_SetPinValue(LCD_D4_PIN,Copy_U8_Pins >> 4 & 0x01);
	M_DIO_Void_SetPinValue(LCD_D5_PIN,Copy_U8_Pins >> 5 & 0x01);
	M_DIO_Void_SetPinValue(LCD_D6_PIN,Copy_U8_Pins >> 6 & 0x01);
	M_DIO_Void_SetPinValue(LCD_D7_PIN,Copy_U8_Pins >> 7 & 0x01);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,Copy_U8_Pins >> 0 & 0x01);
    1f04:	68 2f       	mov	r22, r24
    1f06:	61 70       	andi	r22, 0x01	; 1
    1f08:	8e e0       	ldi	r24, 0x0E	; 14
    1f0a:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,Copy_U8_Pins >> 1 & 0x01);
    1f0e:	61 2f       	mov	r22, r17
    1f10:	66 95       	lsr	r22
    1f12:	61 70       	andi	r22, 0x01	; 1
    1f14:	8f e0       	ldi	r24, 0x0F	; 15
    1f16:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,Copy_U8_Pins >> 2 & 0x01);
    1f1a:	61 2f       	mov	r22, r17
    1f1c:	66 95       	lsr	r22
    1f1e:	66 95       	lsr	r22
    1f20:	61 70       	andi	r22, 0x01	; 1
    1f22:	80 e1       	ldi	r24, 0x10	; 16
    1f24:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,Copy_U8_Pins >> 3 & 0x01);
    1f28:	16 95       	lsr	r17
    1f2a:	16 95       	lsr	r17
    1f2c:	16 95       	lsr	r17
    1f2e:	11 70       	andi	r17, 0x01	; 1
    1f30:	81 e1       	ldi	r24, 0x11	; 17
    1f32:	61 2f       	mov	r22, r17
    1f34:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
#endif
}
    1f38:	1f 91       	pop	r17
    1f3a:	08 95       	ret

00001f3c <H_LCD_Void_LCDWriteCommand>:
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#endif
	_delay_ms(1);
}
void H_LCD_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
    1f3c:	ff 92       	push	r15
    1f3e:	0f 93       	push	r16
    1f40:	1f 93       	push	r17
    1f42:	f8 2e       	mov	r15, r24
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
    1f44:	85 e1       	ldi	r24, 0x15	; 21
    1f46:	60 e0       	ldi	r22, 0x00	; 0
    1f48:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
	H_LCD_Void_SetLCDPins(Copy_U8_Command);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	H_LCD_Void_SetLCDPins(Copy_U8_Command >> 4);
    1f4c:	8f 2d       	mov	r24, r15
    1f4e:	82 95       	swap	r24
    1f50:	8f 70       	andi	r24, 0x0F	; 15
    1f52:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1f56:	87 e1       	ldi	r24, 0x17	; 23
    1f58:	61 e0       	ldi	r22, 0x01	; 1
    1f5a:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    1f5e:	00 ea       	ldi	r16, 0xA0	; 160
    1f60:	1f e0       	ldi	r17, 0x0F	; 15
    1f62:	c8 01       	movw	r24, r16
    1f64:	01 97       	sbiw	r24, 0x01	; 1
    1f66:	f1 f7       	brne	.-4      	; 0x1f64 <H_LCD_Void_LCDWriteCommand+0x28>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1f68:	87 e1       	ldi	r24, 0x17	; 23
    1f6a:	60 e0       	ldi	r22, 0x00	; 0
    1f6c:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    1f70:	c8 01       	movw	r24, r16
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	f1 f7       	brne	.-4      	; 0x1f72 <H_LCD_Void_LCDWriteCommand+0x36>
	_delay_ms(1);
	H_LCD_Void_SetLCDPins(Copy_U8_Command);
    1f76:	8f 2d       	mov	r24, r15
    1f78:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1f7c:	87 e1       	ldi	r24, 0x17	; 23
    1f7e:	61 e0       	ldi	r22, 0x01	; 1
    1f80:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    1f84:	c8 01       	movw	r24, r16
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	f1 f7       	brne	.-4      	; 0x1f86 <H_LCD_Void_LCDWriteCommand+0x4a>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1f8a:	87 e1       	ldi	r24, 0x17	; 23
    1f8c:	60 e0       	ldi	r22, 0x00	; 0
    1f8e:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    1f92:	c8 01       	movw	r24, r16
    1f94:	01 97       	sbiw	r24, 0x01	; 1
    1f96:	f1 f7       	brne	.-4      	; 0x1f94 <H_LCD_Void_LCDWriteCommand+0x58>
#endif
	_delay_ms(1);
}
    1f98:	1f 91       	pop	r17
    1f9a:	0f 91       	pop	r16
    1f9c:	ff 90       	pop	r15
    1f9e:	08 95       	ret

00001fa0 <H_LCD_Void_LCDClear>:



void H_LCD_Void_LCDClear(void)
{
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR);
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <H_LCD_Void_LCDWriteCommand>
}
    1fa6:	08 95       	ret

00001fa8 <H_LCD_Void_LCDGoTo>:




void H_LCD_Void_LCDGoTo(u8 Copy_U8_Row,u8 Copy_U8_Col)
{
    1fa8:	df 93       	push	r29
    1faa:	cf 93       	push	r28
    1fac:	00 d0       	rcall	.+0      	; 0x1fae <H_LCD_Void_LCDGoTo+0x6>
    1fae:	cd b7       	in	r28, 0x3d	; 61
    1fb0:	de b7       	in	r29, 0x3e	; 62
	u8 Local_U8Arr [2] = {0x80 , 0xC0};
    1fb2:	90 e8       	ldi	r25, 0x80	; 128
    1fb4:	99 83       	std	Y+1, r25	; 0x01
    1fb6:	90 ec       	ldi	r25, 0xC0	; 192
    1fb8:	9a 83       	std	Y+2, r25	; 0x02
	H_LCD_Void_LCDWriteCommand(Local_U8Arr[Copy_U8_Row] + Copy_U8_Col);
    1fba:	fe 01       	movw	r30, r28
    1fbc:	e8 0f       	add	r30, r24
    1fbe:	f1 1d       	adc	r31, r1
    1fc0:	81 81       	ldd	r24, Z+1	; 0x01
    1fc2:	86 0f       	add	r24, r22
    1fc4:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <H_LCD_Void_LCDWriteCommand>
}
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	cf 91       	pop	r28
    1fce:	df 91       	pop	r29
    1fd0:	08 95       	ret

00001fd2 <H_LCD_Void_LCDWriteCharacter>:
	H_LCD_Void_LCDWriteCommand(LCD_RETURN_HOME);
#endif

}
void H_LCD_Void_LCDWriteCharacter(u8 Copy_U8_Character)
{
    1fd2:	ff 92       	push	r15
    1fd4:	0f 93       	push	r16
    1fd6:	1f 93       	push	r17
    1fd8:	f8 2e       	mov	r15, r24
	M_DIO_Void_SetPinValue(LCD_RS_PIN,HIGH);
    1fda:	85 e1       	ldi	r24, 0x15	; 21
    1fdc:	61 e0       	ldi	r22, 0x01	; 1
    1fde:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
	H_LCD_Void_SetLCDPins(Copy_U8_Character);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	H_LCD_Void_SetLCDPins(Copy_U8_Character >> 4);
    1fe2:	8f 2d       	mov	r24, r15
    1fe4:	82 95       	swap	r24
    1fe6:	8f 70       	andi	r24, 0x0F	; 15
    1fe8:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1fec:	87 e1       	ldi	r24, 0x17	; 23
    1fee:	61 e0       	ldi	r22, 0x01	; 1
    1ff0:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    1ff4:	00 ea       	ldi	r16, 0xA0	; 160
    1ff6:	1f e0       	ldi	r17, 0x0F	; 15
    1ff8:	c8 01       	movw	r24, r16
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	f1 f7       	brne	.-4      	; 0x1ffa <H_LCD_Void_LCDWriteCharacter+0x28>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1ffe:	87 e1       	ldi	r24, 0x17	; 23
    2000:	60 e0       	ldi	r22, 0x00	; 0
    2002:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    2006:	c8 01       	movw	r24, r16
    2008:	01 97       	sbiw	r24, 0x01	; 1
    200a:	f1 f7       	brne	.-4      	; 0x2008 <H_LCD_Void_LCDWriteCharacter+0x36>
	_delay_ms(1);
	H_LCD_Void_SetLCDPins(Copy_U8_Character);
    200c:	8f 2d       	mov	r24, r15
    200e:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    2012:	87 e1       	ldi	r24, 0x17	; 23
    2014:	61 e0       	ldi	r22, 0x01	; 1
    2016:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    201a:	c8 01       	movw	r24, r16
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	f1 f7       	brne	.-4      	; 0x201c <H_LCD_Void_LCDWriteCharacter+0x4a>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    2020:	87 e1       	ldi	r24, 0x17	; 23
    2022:	60 e0       	ldi	r22, 0x00	; 0
    2024:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
    2028:	c8 01       	movw	r24, r16
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	f1 f7       	brne	.-4      	; 0x202a <H_LCD_Void_LCDWriteCharacter+0x58>
#endif
	_delay_ms(1);
}
    202e:	1f 91       	pop	r17
    2030:	0f 91       	pop	r16
    2032:	ff 90       	pop	r15
    2034:	08 95       	ret

00002036 <H_LCD_Void_LCDWriteNumber>:
		H_LCD_Void_LCDWriteCharacter(Copy_U8_P[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
void H_LCD_Void_LCDWriteNumber(s32 Copy_S32_Num)
{
    2036:	af 92       	push	r10
    2038:	bf 92       	push	r11
    203a:	cf 92       	push	r12
    203c:	df 92       	push	r13
    203e:	ef 92       	push	r14
    2040:	ff 92       	push	r15
    2042:	0f 93       	push	r16
    2044:	df 93       	push	r29
    2046:	cf 93       	push	r28
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
    204c:	62 97       	sbiw	r28, 0x12	; 18
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	f8 94       	cli
    2052:	de bf       	out	0x3e, r29	; 62
    2054:	0f be       	out	0x3f, r0	; 63
    2056:	cd bf       	out	0x3d, r28	; 61
    2058:	6b 01       	movw	r12, r22
    205a:	7c 01       	movw	r14, r24
	s8 Local_S8_Counter = -1;
	u8 Local_U8_Arr[16];
	if(Copy_S32_Num < 0)
    205c:	99 23       	and	r25, r25
    205e:	5c f4       	brge	.+22     	; 0x2076 <H_LCD_Void_LCDWriteNumber+0x40>
	{
		Copy_S32_Num = Copy_S32_Num * -1;
    2060:	f0 94       	com	r15
    2062:	e0 94       	com	r14
    2064:	d0 94       	com	r13
    2066:	c0 94       	com	r12
    2068:	c1 1c       	adc	r12, r1
    206a:	d1 1c       	adc	r13, r1
    206c:	e1 1c       	adc	r14, r1
    206e:	f1 1c       	adc	r15, r1
		H_LCD_Void_LCDWriteCharacter('-');
    2070:	8d e2       	ldi	r24, 0x2D	; 45
    2072:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <H_LCD_Void_LCDWriteCharacter>
    2076:	0f ef       	ldi	r16, 0xFF	; 255
	}
	do
	{
		Local_S8_Counter++;
		Local_U8_Arr[Local_S8_Counter]  =  Copy_S32_Num % 10;
    2078:	5e 01       	movw	r10, r28
    207a:	08 94       	sec
    207c:	a1 1c       	adc	r10, r1
    207e:	b1 1c       	adc	r11, r1
		Copy_S32_Num = Copy_S32_Num * -1;
		H_LCD_Void_LCDWriteCharacter('-');
	}
	do
	{
		Local_S8_Counter++;
    2080:	0f 5f       	subi	r16, 0xFF	; 255
		Local_U8_Arr[Local_S8_Counter]  =  Copy_S32_Num % 10;
    2082:	80 2f       	mov	r24, r16
    2084:	99 27       	eor	r25, r25
    2086:	87 fd       	sbrc	r24, 7
    2088:	90 95       	com	r25
    208a:	95 01       	movw	r18, r10
    208c:	28 0f       	add	r18, r24
    208e:	39 1f       	adc	r19, r25
    2090:	3a 8b       	std	Y+18, r19	; 0x12
    2092:	29 8b       	std	Y+17, r18	; 0x11
    2094:	c7 01       	movw	r24, r14
    2096:	b6 01       	movw	r22, r12
    2098:	2a e0       	ldi	r18, 0x0A	; 10
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	40 e0       	ldi	r20, 0x00	; 0
    209e:	50 e0       	ldi	r21, 0x00	; 0
    20a0:	0e 94 c0 12 	call	0x2580	; 0x2580 <__divmodsi4>
    20a4:	e9 89       	ldd	r30, Y+17	; 0x11
    20a6:	fa 89       	ldd	r31, Y+18	; 0x12
    20a8:	60 83       	st	Z, r22
		Copy_S32_Num = Copy_S32_Num / 10;
    20aa:	c7 01       	movw	r24, r14
    20ac:	b6 01       	movw	r22, r12
    20ae:	2a e0       	ldi	r18, 0x0A	; 10
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	40 e0       	ldi	r20, 0x00	; 0
    20b4:	50 e0       	ldi	r21, 0x00	; 0
    20b6:	0e 94 c0 12 	call	0x2580	; 0x2580 <__divmodsi4>
    20ba:	82 2f       	mov	r24, r18
    20bc:	93 2f       	mov	r25, r19
    20be:	a4 2f       	mov	r26, r20
    20c0:	b5 2f       	mov	r27, r21
    20c2:	6c 01       	movw	r12, r24
    20c4:	7d 01       	movw	r14, r26
	}while(Copy_S32_Num != 0);
    20c6:	c1 14       	cp	r12, r1
    20c8:	d1 04       	cpc	r13, r1
    20ca:	e1 04       	cpc	r14, r1
    20cc:	f1 04       	cpc	r15, r1
    20ce:	c1 f6       	brne	.-80     	; 0x2080 <H_LCD_Void_LCDWriteNumber+0x4a>
	while(Local_S8_Counter >= 0)
    20d0:	00 23       	and	r16, r16
    20d2:	8c f0       	brlt	.+34     	; 0x20f6 <H_LCD_Void_LCDWriteNumber+0xc0>
	{
		H_LCD_Void_LCDWriteCharacter(Local_U8_Arr[Local_S8_Counter] + 48);
    20d4:	7e 01       	movw	r14, r28
    20d6:	08 94       	sec
    20d8:	e1 1c       	adc	r14, r1
    20da:	f1 1c       	adc	r15, r1
    20dc:	80 2f       	mov	r24, r16
    20de:	99 27       	eor	r25, r25
    20e0:	87 fd       	sbrc	r24, 7
    20e2:	90 95       	com	r25
    20e4:	f7 01       	movw	r30, r14
    20e6:	e8 0f       	add	r30, r24
    20e8:	f9 1f       	adc	r31, r25
    20ea:	80 81       	ld	r24, Z
    20ec:	80 5d       	subi	r24, 0xD0	; 208
    20ee:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <H_LCD_Void_LCDWriteCharacter>
		Local_S8_Counter--;
    20f2:	01 50       	subi	r16, 0x01	; 1
	{
		Local_S8_Counter++;
		Local_U8_Arr[Local_S8_Counter]  =  Copy_S32_Num % 10;
		Copy_S32_Num = Copy_S32_Num / 10;
	}while(Copy_S32_Num != 0);
	while(Local_S8_Counter >= 0)
    20f4:	9a f7       	brpl	.-26     	; 0x20dc <H_LCD_Void_LCDWriteNumber+0xa6>
		H_LCD_Void_LCDWriteCharacter(Local_U8_Arr[Local_S8_Counter] + 48);
		Local_S8_Counter--;
	}


}
    20f6:	62 96       	adiw	r28, 0x12	; 18
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	cf 91       	pop	r28
    2104:	df 91       	pop	r29
    2106:	0f 91       	pop	r16
    2108:	ff 90       	pop	r15
    210a:	ef 90       	pop	r14
    210c:	df 90       	pop	r13
    210e:	cf 90       	pop	r12
    2110:	bf 90       	pop	r11
    2112:	af 90       	pop	r10
    2114:	08 95       	ret

00002116 <H_LCD_Void_LCDWriteString>:
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#endif
	_delay_ms(1);
}
void H_LCD_Void_LCDWriteString(u8* Copy_U8_P)
{
    2116:	1f 93       	push	r17
    2118:	cf 93       	push	r28
    211a:	df 93       	push	r29
    211c:	ec 01       	movw	r28, r24
	u8 Local_U8_Counter = 0;
	while(Copy_U8_P[Local_U8_Counter] != '\0')
    211e:	88 81       	ld	r24, Y
    2120:	88 23       	and	r24, r24
    2122:	51 f0       	breq	.+20     	; 0x2138 <H_LCD_Void_LCDWriteString+0x22>
    2124:	10 e0       	ldi	r17, 0x00	; 0
	{
		H_LCD_Void_LCDWriteCharacter(Copy_U8_P[Local_U8_Counter]);
    2126:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <H_LCD_Void_LCDWriteCharacter>
		Local_U8_Counter++;
    212a:	1f 5f       	subi	r17, 0xFF	; 255
	_delay_ms(1);
}
void H_LCD_Void_LCDWriteString(u8* Copy_U8_P)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_P[Local_U8_Counter] != '\0')
    212c:	fe 01       	movw	r30, r28
    212e:	e1 0f       	add	r30, r17
    2130:	f1 1d       	adc	r31, r1
    2132:	80 81       	ld	r24, Z
    2134:	88 23       	and	r24, r24
    2136:	b9 f7       	brne	.-18     	; 0x2126 <H_LCD_Void_LCDWriteString+0x10>
	{
		H_LCD_Void_LCDWriteCharacter(Copy_U8_P[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
    2138:	df 91       	pop	r29
    213a:	cf 91       	pop	r28
    213c:	1f 91       	pop	r17
    213e:	08 95       	ret

00002140 <H_LCD_Void_LCDInit>:
	M_DIO_Void_SetPinDirection(LCD_RW_PIN,OUTPUT);
	M_DIO_Void_SetPinValue(LCD_RW_PIN,LOW);
	H_LCD_Void_LCDWriteCommand(LCD_8_BIT_MODE);
	H_LCD_Void_LCDWriteCommand(LCD_DISPLAY_ON_CURSOR_OFF);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
    2140:	8e e0       	ldi	r24, 0x0E	; 14
    2142:	61 e0       	ldi	r22, 0x01	; 1
    2144:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
    2148:	8f e0       	ldi	r24, 0x0F	; 15
    214a:	61 e0       	ldi	r22, 0x01	; 1
    214c:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
    2150:	80 e1       	ldi	r24, 0x10	; 16
    2152:	61 e0       	ldi	r22, 0x01	; 1
    2154:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
    2158:	81 e1       	ldi	r24, 0x11	; 17
    215a:	61 e0       	ldi	r22, 0x01	; 1
    215c:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
    2160:	85 e1       	ldi	r24, 0x15	; 21
    2162:	61 e0       	ldi	r22, 0x01	; 1
    2164:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
    2168:	87 e1       	ldi	r24, 0x17	; 23
    216a:	61 e0       	ldi	r22, 0x01	; 1
    216c:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RW_PIN,OUTPUT);
    2170:	86 e1       	ldi	r24, 0x16	; 22
    2172:	61 e0       	ldi	r22, 0x01	; 1
    2174:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinValue(LCD_RW_PIN,LOW);
    2178:	86 e1       	ldi	r24, 0x16	; 22
    217a:	60 e0       	ldi	r22, 0x00	; 0
    217c:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>

	H_LCD_Void_LCDWriteCommand(LCD_4_BIT_MODE_1);
    2180:	83 e3       	ldi	r24, 0x33	; 51
    2182:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_4_BIT_MODE_2);
    2186:	82 e3       	ldi	r24, 0x32	; 50
    2188:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_4_BIT_MODE_3);
    218c:	88 e2       	ldi	r24, 0x28	; 40
    218e:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <H_LCD_Void_LCDWriteCommand>

	H_LCD_Void_LCDWriteCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    2192:	8c e0       	ldi	r24, 0x0C	; 12
    2194:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR);
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_RETURN_HOME);
    219e:	82 e0       	ldi	r24, 0x02	; 2
    21a0:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <H_LCD_Void_LCDWriteCommand>
#endif

}
    21a4:	08 95       	ret

000021a6 <H_HeatingElement_U8_HeatingElementBlink>:
	return M_DIO_U8_GetPinValue(HEATING_ELEMENT_PIN);

}
void H_HeatingElement_U8_HeatingElementBlink()
{
	M_DIO_Void_TogPin(HEATING_ELEMENT_PIN);
    21a6:	80 e2       	ldi	r24, 0x20	; 32
    21a8:	0e 94 86 0b 	call	0x170c	; 0x170c <M_DIO_Void_TogPin>
}
    21ac:	08 95       	ret

000021ae <H_HeatingElement_U8_HeatingElementRead>:
	M_DIO_Void_SetPinValue(HEATING_ELEMENT_PIN,LOW);

}
u8 H_HeatingElement_U8_HeatingElementRead()
{
	return M_DIO_U8_GetPinValue(HEATING_ELEMENT_PIN);
    21ae:	80 e2       	ldi	r24, 0x20	; 32
    21b0:	0e 94 ce 0b 	call	0x179c	; 0x179c <M_DIO_U8_GetPinValue>

}
    21b4:	08 95       	ret

000021b6 <H_HeatingElement_Void_HeatingElementStop>:
{
	M_DIO_Void_SetPinValue(HEATING_ELEMENT_PIN,HIGH);
}
void H_HeatingElement_Void_HeatingElementStop()
{
	M_DIO_Void_SetPinValue(HEATING_ELEMENT_PIN,LOW);
    21b6:	80 e2       	ldi	r24, 0x20	; 32
    21b8:	60 e0       	ldi	r22, 0x00	; 0
    21ba:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>

}
    21be:	08 95       	ret

000021c0 <H_HeatingElement_Void_HeatingElementStart>:
{
	M_DIO_Void_SetPinDirection(HEATING_ELEMENT_PIN,OUTPUT);
}
void H_HeatingElement_Void_HeatingElementStart()
{
	M_DIO_Void_SetPinValue(HEATING_ELEMENT_PIN,HIGH);
    21c0:	80 e2       	ldi	r24, 0x20	; 32
    21c2:	61 e0       	ldi	r22, 0x01	; 1
    21c4:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
}
    21c8:	08 95       	ret

000021ca <H_HeatingElement_Void_HeatingElementInit>:
 */
#include"HeatingElement_Interface.h"
#include"HeatingElement_Private.h"
void H_HeatingElement_Void_HeatingElementInit()
{
	M_DIO_Void_SetPinDirection(HEATING_ELEMENT_PIN,OUTPUT);
    21ca:	80 e2       	ldi	r24, 0x20	; 32
    21cc:	61 e0       	ldi	r22, 0x01	; 1
    21ce:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <M_DIO_Void_SetPinDirection>
}
    21d2:	08 95       	ret

000021d4 <H_Fan_U8_FanRead>:
	M_DIO_Void_SetPinValue(FAN_PIN,LOW);

}
u8 H_Fan_U8_FanRead()
{
	return M_DIO_U8_GetPinValue(FAN_PIN);
    21d4:	83 e2       	ldi	r24, 0x23	; 35
    21d6:	0e 94 ce 0b 	call	0x179c	; 0x179c <M_DIO_U8_GetPinValue>
}
    21da:	08 95       	ret

000021dc <H_Fan_Void_FanSetOff>:


}
void H_Fan_Void_FanSetOff()
{
	M_DIO_Void_SetPinValue(FAN_PIN,LOW);
    21dc:	83 e2       	ldi	r24, 0x23	; 35
    21de:	60 e0       	ldi	r22, 0x00	; 0
    21e0:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>

}
    21e4:	08 95       	ret

000021e6 <H_Fan_Void_FanSetOn>:
	M_DIO_Void_SetPinDirection(FAN_PIN,OUTPUT);
}
void H_Fan_Void_FanSetOn()
{

	M_DIO_Void_SetPinValue(FAN_PIN,HIGH);
    21e6:	83 e2       	ldi	r24, 0x23	; 35
    21e8:	61 e0       	ldi	r22, 0x01	; 1
    21ea:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>


}
    21ee:	08 95       	ret

000021f0 <H_Fan_Void_FanInit>:
#include"Fan_Interface.h"
#include"Fan_Private.h"
#include"Fan_Configure.h"
void H_Fan_Void_FanInit()
{
	M_DIO_Void_SetPinDirection(FAN_PIN,OUTPUT);
    21f0:	83 e2       	ldi	r24, 0x23	; 35
    21f2:	61 e0       	ldi	r22, 0x01	; 1
    21f4:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <M_DIO_Void_SetPinDirection>
}
    21f8:	08 95       	ret

000021fa <H_AT24C16A_Void_EEPROMRead>:

	M_I2C_Void_I2CStopCondition();

}
u8   H_AT24C16A_Void_EEPROMRead(u8 Copy_U8_Page,u8 Copy_U8_Byte)
{
    21fa:	0f 93       	push	r16
    21fc:	1f 93       	push	r17
    21fe:	18 2f       	mov	r17, r24
    2200:	06 2f       	mov	r16, r22
	u8 Local_U8_Reading = 0;
	M_I2C_Void_I2CStartCondition();
    2202:	0e 94 3c 09 	call	0x1278	; 0x1278 <M_I2C_Void_I2CStartCondition>
	M_I2C_Void_I2CSendSlaveAddressWrite(0x50 | Copy_U8_Page);
    2206:	10 65       	ori	r17, 0x50	; 80
    2208:	81 2f       	mov	r24, r17
    220a:	0e 94 a7 09 	call	0x134e	; 0x134e <M_I2C_Void_I2CSendSlaveAddressWrite>
	H_LED_Void_LedSetOn(LED1);
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <H_LED_Void_LedSetOn>


	M_I2C_Void_I2CSendByte(Copy_U8_Byte);
    2214:	80 2f       	mov	r24, r16
    2216:	0e 94 7e 09 	call	0x12fc	; 0x12fc <M_I2C_Void_I2CSendByte>
	M_I2C_Void_I2CRepeatedStart();
    221a:	0e 94 57 09 	call	0x12ae	; 0x12ae <M_I2C_Void_I2CRepeatedStart>
	M_I2C_Void_I2CSendSlaveAddressRead(0x50 | Copy_U8_Page);
    221e:	81 2f       	mov	r24, r17
    2220:	0e 94 69 09 	call	0x12d2	; 0x12d2 <M_I2C_Void_I2CSendSlaveAddressRead>
	Local_U8_Reading = M_I2C_Void_I2CReadByte();
    2224:	0e 94 91 09 	call	0x1322	; 0x1322 <M_I2C_Void_I2CReadByte>
    2228:	18 2f       	mov	r17, r24
	M_I2C_Void_I2CStopCondition();
    222a:	0e 94 4e 09 	call	0x129c	; 0x129c <M_I2C_Void_I2CStopCondition>
	return Local_U8_Reading;
}
    222e:	81 2f       	mov	r24, r17
    2230:	1f 91       	pop	r17
    2232:	0f 91       	pop	r16
    2234:	08 95       	ret

00002236 <H_AT24C16A_Void_EEPROMWrite>:
{
	M_I2C_Void_I2CInit();
	_delay_ms(1000);
}
void H_AT24C16A_Void_EEPROMWrite(u8 Copy_U8_Page,u8 Copy_U8_Byte,u8 Copy_U8_Data)
{
    2236:	ff 92       	push	r15
    2238:	0f 93       	push	r16
    223a:	1f 93       	push	r17
    223c:	18 2f       	mov	r17, r24
    223e:	06 2f       	mov	r16, r22
    2240:	f4 2e       	mov	r15, r20
	M_I2C_Void_I2CStartCondition();
    2242:	0e 94 3c 09 	call	0x1278	; 0x1278 <M_I2C_Void_I2CStartCondition>

	M_I2C_Void_I2CSendSlaveAddressWrite(0x50 | Copy_U8_Page);
    2246:	81 2f       	mov	r24, r17
    2248:	80 65       	ori	r24, 0x50	; 80
    224a:	0e 94 a7 09 	call	0x134e	; 0x134e <M_I2C_Void_I2CSendSlaveAddressWrite>

	M_I2C_Void_I2CSendByte(Copy_U8_Byte);
    224e:	80 2f       	mov	r24, r16
    2250:	0e 94 7e 09 	call	0x12fc	; 0x12fc <M_I2C_Void_I2CSendByte>

	M_I2C_Void_I2CSendByte(Copy_U8_Data);
    2254:	8f 2d       	mov	r24, r15
    2256:	0e 94 7e 09 	call	0x12fc	; 0x12fc <M_I2C_Void_I2CSendByte>

	M_I2C_Void_I2CStopCondition();
    225a:	0e 94 4e 09 	call	0x129c	; 0x129c <M_I2C_Void_I2CStopCondition>

}
    225e:	1f 91       	pop	r17
    2260:	0f 91       	pop	r16
    2262:	ff 90       	pop	r15
    2264:	08 95       	ret

00002266 <H_AT24C16A_Void_EEPROMInit>:
#include"LED_Interface.h"
#include "AT24C16A_Interface.h"

void H_AT24C16A_Void_EEPROMInit(void)
{
	M_I2C_Void_I2CInit();
    2266:	0e 94 34 09 	call	0x1268	; 0x1268 <M_I2C_Void_I2CInit>
    226a:	20 e1       	ldi	r18, 0x10	; 16
    226c:	37 e2       	ldi	r19, 0x27	; 39
    226e:	40 e9       	ldi	r20, 0x90	; 144
    2270:	51 e0       	ldi	r21, 0x01	; 1
    2272:	ca 01       	movw	r24, r20
    2274:	01 97       	sbiw	r24, 0x01	; 1
    2276:	f1 f7       	brne	.-4      	; 0x2274 <H_AT24C16A_Void_EEPROMInit+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2278:	21 50       	subi	r18, 0x01	; 1
    227a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    227c:	d1 f7       	brne	.-12     	; 0x2272 <H_AT24C16A_Void_EEPROMInit+0xc>
	_delay_ms(1000);
}
    227e:	08 95       	ret

00002280 <A_Timer2_Execution>:

	}
}
void A_Timer2_Execution(void) {
	//if up and down buttons are not pressed for 5 seconds , exit temp setting mode and disolay current water temp
	if (Up_Button_Pressed == False && Down_Button_Pressed == False) {
    2280:	80 91 80 01 	lds	r24, 0x0180
    2284:	88 23       	and	r24, r24
    2286:	31 f4       	brne	.+12     	; 0x2294 <A_Timer2_Execution+0x14>
    2288:	80 91 81 01 	lds	r24, 0x0181
    228c:	88 23       	and	r24, r24
    228e:	11 f4       	brne	.+4      	; 0x2294 <A_Timer2_Execution+0x14>
		Enter_Temprature_Setting_Mode = False;
    2290:	10 92 7f 01 	sts	0x017F, r1
    2294:	08 95       	ret

00002296 <A_Get_Average_Last_10_Readings>:
	}

}
//THIS FUNCTION IS USELESS IN SIMULATION MODE -> WILL BE USED IN HARDWARE
u32 A_Get_Average_Last_10_Readings(void)
{
    2296:	ee e8       	ldi	r30, 0x8E	; 142
    2298:	f1 e0       	ldi	r31, 0x01	; 1
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	40 e0       	ldi	r20, 0x00	; 0
    22a0:	50 e0       	ldi	r21, 0x00	; 0
	u8 Local_U8_Counter = 0;
	u32 Local_U32_Sum = 0;

	for (Local_U8_Counter = 0; Local_U8_Counter < 10; Local_U8_Counter++) {
    22a2:	68 e9       	ldi	r22, 0x98	; 152
    22a4:	71 e0       	ldi	r23, 0x01	; 1
		Local_U32_Sum += Temprature_Array[Local_U8_Counter];
    22a6:	81 91       	ld	r24, Z+
    22a8:	28 0f       	add	r18, r24
    22aa:	31 1d       	adc	r19, r1
    22ac:	41 1d       	adc	r20, r1
    22ae:	51 1d       	adc	r21, r1
u32 A_Get_Average_Last_10_Readings(void)
{
	u8 Local_U8_Counter = 0;
	u32 Local_U32_Sum = 0;

	for (Local_U8_Counter = 0; Local_U8_Counter < 10; Local_U8_Counter++) {
    22b0:	e6 17       	cp	r30, r22
    22b2:	f7 07       	cpc	r31, r23
    22b4:	c1 f7       	brne	.-16     	; 0x22a6 <A_Get_Average_Last_10_Readings+0x10>
    22b6:	ca 01       	movw	r24, r20
    22b8:	b9 01       	movw	r22, r18
    22ba:	2a e0       	ldi	r18, 0x0A	; 10
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	40 e0       	ldi	r20, 0x00	; 0
    22c0:	50 e0       	ldi	r21, 0x00	; 0
    22c2:	0e 94 9e 12 	call	0x253c	; 0x253c <__udivmodsi4>
    22c6:	84 2f       	mov	r24, r20
    22c8:	95 2f       	mov	r25, r21
		Local_U32_Sum += Temprature_Array[Local_U8_Counter];
	}
	return (Local_U32_Sum / 10);
}
    22ca:	62 2f       	mov	r22, r18
    22cc:	73 2f       	mov	r23, r19
    22ce:	08 95       	ret

000022d0 <A_Timer0_Execution>:

}

void A_Timer0_Execution(void) {

	_1_sec_Counter++;
    22d0:	80 91 83 01 	lds	r24, 0x0183
    22d4:	8f 5f       	subi	r24, 0xFF	; 255
    22d6:	80 93 83 01 	sts	0x0183, r24

	if (_1_sec_Counter == HEATER_BLINKING_TIME)
    22da:	85 30       	cpi	r24, 0x05	; 5
    22dc:	b1 f4       	brne	.+44     	; 0x230a <A_Timer0_Execution+0x3a>
	{
		_1_sec_Counter = 0;
    22de:	10 92 83 01 	sts	0x0183, r1
		if (H_HeatingElement_U8_HeatingElementRead() == HIGH)
    22e2:	0e 94 d7 10 	call	0x21ae	; 0x21ae <H_HeatingElement_U8_HeatingElementRead>
    22e6:	81 30       	cpi	r24, 0x01	; 1
    22e8:	11 f4       	brne	.+4      	; 0x22ee <A_Timer0_Execution+0x1e>
			H_LED_Void_LedTog(LED1);
    22ea:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <H_LED_Void_LedTog>
		_1_sec_Counter = 0;
    22ee:	10 92 83 01 	sts	0x0183, r1
				if (Enter_Temprature_Setting_Mode == True)
    22f2:	80 91 7f 01 	lds	r24, 0x017F
    22f6:	81 30       	cpi	r24, 0x01	; 1
    22f8:	21 f4       	brne	.+8      	; 0x2302 <A_Timer0_Execution+0x32>
					M_DIO_Void_TogPin(SSD_EN);
    22fa:	87 e1       	ldi	r24, 0x17	; 23
    22fc:	0e 94 86 0b 	call	0x170c	; 0x170c <M_DIO_Void_TogPin>
    2300:	04 c0       	rjmp	.+8      	; 0x230a <A_Timer0_Execution+0x3a>
				else
					M_DIO_Void_SetPinValue(SSD_EN, LOW);
    2302:	87 e1       	ldi	r24, 0x17	; 23
    2304:	60 e0       	ldi	r22, 0x00	; 0
    2306:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <M_DIO_Void_SetPinValue>
	}

	LM35_Reading = H_LM35_Void_LM35Read();
    230a:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <H_LM35_Void_LM35Read>
    230e:	98 2f       	mov	r25, r24
    2310:	80 93 7d 01 	sts	0x017D, r24
	if (Temprature_Array_Counter == 10)
    2314:	80 91 7e 01 	lds	r24, 0x017E
    2318:	8a 30       	cpi	r24, 0x0A	; 10
    231a:	11 f4       	brne	.+4      	; 0x2320 <A_Timer0_Execution+0x50>
		Temprature_Array_Counter = 0;
    231c:	10 92 7e 01 	sts	0x017E, r1
	//stores the last ten values of lm35 readings instead of eeprom
	Temprature_Array[Temprature_Array_Counter] = LM35_Reading;
    2320:	80 91 7e 01 	lds	r24, 0x017E
    2324:	ee e8       	ldi	r30, 0x8E	; 142
    2326:	f1 e0       	ldi	r31, 0x01	; 1
    2328:	e8 0f       	add	r30, r24
    232a:	f1 1d       	adc	r31, r1
    232c:	90 83       	st	Z, r25
	Temprature_Array_Counter++;
    232e:	8f 5f       	subi	r24, 0xFF	; 255
    2330:	80 93 7e 01 	sts	0x017E, r24
	if (Enter_Temprature_Setting_Mode == False) {
    2334:	80 91 7f 01 	lds	r24, 0x017F
    2338:	88 23       	and	r24, r24
    233a:	19 f4       	brne	.+6      	; 0x2342 <A_Timer0_Execution+0x72>
		H_SSD_Void_SSDWriteNumber(LM35_Reading);
    233c:	89 2f       	mov	r24, r25
    233e:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <H_SSD_Void_SSDWriteNumber>
    2342:	08 95       	ret

00002344 <A_EXT_INT0_Execution>:
	M_Timer_Void_TimerStart(TIMER2_CHANNEL);
}
//UP BUTTON PRESSED
void A_EXT_INT0_Execution(void)
{
	if (Enter_Temprature_Setting_Mode == False) {
    2344:	80 91 7f 01 	lds	r24, 0x017F
    2348:	88 23       	and	r24, r24
    234a:	21 f4       	brne	.+8      	; 0x2354 <A_EXT_INT0_Execution+0x10>
		Enter_Temprature_Setting_Mode = True;
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	80 93 7f 01 	sts	0x017F, r24
    2352:	08 c0       	rjmp	.+16     	; 0x2364 <A_EXT_INT0_Execution+0x20>
	}
	else
	{
		Up_Button_Pressed = True;
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	80 93 80 01 	sts	0x0180, r24
		H_Fan_Void_FanSetOff();
    235a:	0e 94 ee 10 	call	0x21dc	; 0x21dc <H_Fan_Void_FanSetOff>
		H_LED_Void_LedSetOff(LED1);
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <H_LED_Void_LedSetOff>
	}
	M_Timer_Void_TimerStop(TIMER2_CHANNEL);
    2364:	82 e0       	ldi	r24, 0x02	; 2
    2366:	0e 94 bb 07 	call	0xf76	; 0xf76 <M_Timer_Void_TimerStop>
	M_Timer_Void_TimerStart(TIMER2_CHANNEL);
    236a:	82 e0       	ldi	r24, 0x02	; 2
    236c:	0e 94 90 07 	call	0xf20	; 0xf20 <M_Timer_Void_TimerStart>

}
    2370:	08 95       	ret

00002372 <A_EXT_INT1_Execution>:
	return 0;
}
//DOWN BUTTON PRESSED
void A_EXT_INT1_Execution(void)
{
	if (Enter_Temprature_Setting_Mode == False) {
    2372:	80 91 7f 01 	lds	r24, 0x017F
    2376:	88 23       	and	r24, r24
    2378:	21 f4       	brne	.+8      	; 0x2382 <A_EXT_INT1_Execution+0x10>
		//ENTER TEMPRATURE SETTING MODE
		Enter_Temprature_Setting_Mode = True;
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	80 93 7f 01 	sts	0x017F, r24
    2380:	08 c0       	rjmp	.+16     	; 0x2392 <A_EXT_INT1_Execution+0x20>
	}
	else //TO ENSURE THAT BOTH ARE NOT WORKING TOGETHER
	{
		Down_Button_Pressed = True;
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	80 93 81 01 	sts	0x0181, r24
		H_HeatingElement_Void_HeatingElementStop();
    2388:	0e 94 db 10 	call	0x21b6	; 0x21b6 <H_HeatingElement_Void_HeatingElementStop>
		H_LED_Void_LedSetOff(LED1);
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <H_LED_Void_LedSetOff>

	}
//START COUNTING 5 SECOND SO THAT IF UP/DOWN BUTTONS ARE NOT PRESSED -> EXIT TEMP SETTING MODE
	M_Timer_Void_TimerStop(TIMER2_CHANNEL);
    2392:	82 e0       	ldi	r24, 0x02	; 2
    2394:	0e 94 bb 07 	call	0xf76	; 0xf76 <M_Timer_Void_TimerStop>
	M_Timer_Void_TimerStart(TIMER2_CHANNEL);
    2398:	82 e0       	ldi	r24, 0x02	; 2
    239a:	0e 94 90 07 	call	0xf20	; 0xf20 <M_Timer_Void_TimerStart>
}
    239e:	08 95       	ret

000023a0 <main>:
u8 Up_Button_Pressed = False;
u8 Down_Button_Pressed = False;
u8 Set_Temprature = 0;
u8 _1_sec_Counter = 0; //for heater and fan

int main() {
    23a0:	0f 93       	push	r16
    23a2:	1f 93       	push	r17
    23a4:	cf 93       	push	r28
    23a6:	df 93       	push	r29
	//FLAG ON WHEN SET TEMP EXCEEDS MAX OR BELOW MIN
	H_LED_Void_LedInit(LED3);
    23a8:	83 e0       	ldi	r24, 0x03	; 3
    23aa:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <H_LED_Void_LedInit>
	//FLAG OF HEATING ELEMENT
	H_LED_Void_LedInit(LED1);
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <H_LED_Void_LedInit>
	//SEVEN SEGMENT DISPLAY
	H_SSD_Void_SSDInit();
    23b4:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <H_SSD_Void_SSDInit>
	//COOLING ELEMENT INIT
	H_Fan_Void_FanInit();
    23b8:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <H_Fan_Void_FanInit>
	//HEATING ELEMENT INIT
	H_HeatingElement_Void_HeatingElementInit();
    23bc:	0e 94 e5 10 	call	0x21ca	; 0x21ca <H_HeatingElement_Void_HeatingElementInit>
	//PUSH BUTTON UP AND DOWN
	M_EXT_INT_Void_ExtIntInit(EXT_INT_0);
    23c0:	80 e0       	ldi	r24, 0x00	; 0
    23c2:	0e 94 c7 09 	call	0x138e	; 0x138e <M_EXT_INT_Void_ExtIntInit>
	M_EXT_INT_Void_ExtIntInit(EXT_INT_1);
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	0e 94 c7 09 	call	0x138e	; 0x138e <M_EXT_INT_Void_ExtIntInit>
	M_EXT_INT_Void_SetCallBack(EXT_INT_0, A_EXT_INT0_Execution);
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	62 ea       	ldi	r22, 0xA2	; 162
    23d0:	71 e1       	ldi	r23, 0x11	; 17
    23d2:	0e 94 f5 09 	call	0x13ea	; 0x13ea <M_EXT_INT_Void_SetCallBack>
	M_EXT_INT_Void_SetCallBack(EXT_INT_1, A_EXT_INT1_Execution);
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	69 eb       	ldi	r22, 0xB9	; 185
    23da:	71 e1       	ldi	r23, 0x11	; 17
    23dc:	0e 94 f5 09 	call	0x13ea	; 0x13ea <M_EXT_INT_Void_SetCallBack>
	//TEMP SENSOR
	H_LM35_Void_LM35Init();
    23e0:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <H_LM35_Void_LM35Init>
	//H_AT24C16A_Void_EEPROMInit();
	// SET TIMER0 TO 100 MS TO READ TEMP
	M_Timer_Void_TimerInit(TIMER0_CHANNEL);
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	0e 94 e7 06 	call	0xdce	; 0xdce <M_Timer_Void_TimerInit>
	M_Timer_Void_SetCallBack(TIMER0_CHANNEL, A_Timer0_Execution);
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	68 e6       	ldi	r22, 0x68	; 104
    23ee:	71 e1       	ldi	r23, 0x11	; 17
    23f0:	0e 94 49 08 	call	0x1092	; 0x1092 <M_Timer_Void_SetCallBack>
	M_Timer_Void_TimerSetTime(TIMER0_CHANNEL, 100);
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	44 e6       	ldi	r20, 0x64	; 100
    23f8:	50 e0       	ldi	r21, 0x00	; 0
    23fa:	60 e0       	ldi	r22, 0x00	; 0
    23fc:	70 e0       	ldi	r23, 0x00	; 0
    23fe:	0e 94 08 07 	call	0xe10	; 0xe10 <M_Timer_Void_TimerSetTime>
	M_GIE_Void_GlobalInterruptEnable();
    2402:	0e 94 bb 09 	call	0x1376	; 0x1376 <M_GIE_Void_GlobalInterruptEnable>
	M_Timer_Void_TimerStart(TIMER0_CHANNEL);
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	0e 94 90 07 	call	0xf20	; 0xf20 <M_Timer_Void_TimerStart>
	//SET TIMER 2 EVERY 5 SECONDS
	M_Timer_Void_TimerInit(TIMER2_CHANNEL);
    240c:	82 e0       	ldi	r24, 0x02	; 2
    240e:	0e 94 e7 06 	call	0xdce	; 0xdce <M_Timer_Void_TimerInit>
	M_Timer_Void_SetCallBack(TIMER2_CHANNEL, A_Timer2_Execution);
    2412:	82 e0       	ldi	r24, 0x02	; 2
    2414:	60 e4       	ldi	r22, 0x40	; 64
    2416:	71 e1       	ldi	r23, 0x11	; 17
    2418:	0e 94 49 08 	call	0x1092	; 0x1092 <M_Timer_Void_SetCallBack>
	M_Timer_Void_TimerSetTime(TIMER2_CHANNEL, 5000);
    241c:	82 e0       	ldi	r24, 0x02	; 2
    241e:	48 e8       	ldi	r20, 0x88	; 136
    2420:	53 e1       	ldi	r21, 0x13	; 19
    2422:	60 e0       	ldi	r22, 0x00	; 0
    2424:	70 e0       	ldi	r23, 0x00	; 0
    2426:	0e 94 08 07 	call	0xe10	; 0xe10 <M_Timer_Void_TimerSetTime>
				//H_LED_Void_LedSetOn(LED1);
				H_SSD_Void_SSDWriteNumber(Set_Temprature);
			} else {
				H_SSD_Void_SSDWriteNumber(MAXIMUM_TEMPRATURE);
				//FLAG ON WHEN SET TEMP OUT OF RANGE[MIN-MAX]
				H_LED_Void_LedSetOn(LED3);
    242a:	00 e2       	ldi	r16, 0x20	; 32
    242c:	1e e4       	ldi	r17, 0x4E	; 78
    242e:	c0 e9       	ldi	r28, 0x90	; 144
    2430:	d1 e0       	ldi	r29, 0x01	; 1
	M_Timer_Void_TimerInit(TIMER2_CHANNEL);
	M_Timer_Void_SetCallBack(TIMER2_CHANNEL, A_Timer2_Execution);
	M_Timer_Void_TimerSetTime(TIMER2_CHANNEL, 5000);

	while (1) {
		if (Up_Button_Pressed == True) {
    2432:	80 91 80 01 	lds	r24, 0x0180
    2436:	81 30       	cpi	r24, 0x01	; 1
    2438:	01 f5       	brne	.+64     	; 0x247a <main+0xda>

			Set_Temprature = LM35_Reading + 5;
    243a:	80 91 7d 01 	lds	r24, 0x017D
    243e:	8b 5f       	subi	r24, 0xFB	; 251
    2440:	80 93 82 01 	sts	0x0182, r24
			if (Set_Temprature <= MAXIMUM_TEMPRATURE) {
    2444:	8c 34       	cpi	r24, 0x4C	; 76
    2446:	38 f4       	brcc	.+14     	; 0x2456 <main+0xb6>
				H_HeatingElement_Void_HeatingElementStart();
    2448:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <H_HeatingElement_Void_HeatingElementStart>
				//H_LED_Void_LedSetOn(LED1);
				H_SSD_Void_SSDWriteNumber(Set_Temprature);
    244c:	80 91 82 01 	lds	r24, 0x0182
    2450:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <H_SSD_Void_SSDWriteNumber>
    2454:	10 c0       	rjmp	.+32     	; 0x2476 <main+0xd6>
			} else {
				H_SSD_Void_SSDWriteNumber(MAXIMUM_TEMPRATURE);
    2456:	8b e4       	ldi	r24, 0x4B	; 75
    2458:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <H_SSD_Void_SSDWriteNumber>
				//FLAG ON WHEN SET TEMP OUT OF RANGE[MIN-MAX]
				H_LED_Void_LedSetOn(LED3);
    245c:	83 e0       	ldi	r24, 0x03	; 3
    245e:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <H_LED_Void_LedSetOn>
    2462:	98 01       	movw	r18, r16
    2464:	ce 01       	movw	r24, r28
    2466:	01 97       	sbiw	r24, 0x01	; 1
    2468:	f1 f7       	brne	.-4      	; 0x2466 <main+0xc6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    246a:	21 50       	subi	r18, 0x01	; 1
    246c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246e:	d1 f7       	brne	.-12     	; 0x2464 <main+0xc4>
				_delay_ms(2000);
				H_LED_Void_LedSetOff(LED3);
    2470:	83 e0       	ldi	r24, 0x03	; 3
    2472:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <H_LED_Void_LedSetOff>
			}
			Up_Button_Pressed = False;
    2476:	10 92 80 01 	sts	0x0180, r1
		}
		if (Down_Button_Pressed == True) {
    247a:	80 91 81 01 	lds	r24, 0x0181
    247e:	81 30       	cpi	r24, 0x01	; 1
    2480:	19 f5       	brne	.+70     	; 0x24c8 <main+0x128>
			Set_Temprature = LM35_Reading - 5;
    2482:	80 91 7d 01 	lds	r24, 0x017D
    2486:	85 50       	subi	r24, 0x05	; 5
    2488:	80 93 82 01 	sts	0x0182, r24
			if (Set_Temprature >= MINIMUM_TEMPRATURE) {
    248c:	83 32       	cpi	r24, 0x23	; 35
    248e:	50 f0       	brcs	.+20     	; 0x24a4 <main+0x104>
				H_Fan_Void_FanSetOn();
    2490:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <H_Fan_Void_FanSetOn>
				H_LED_Void_LedSetOn(LED1);
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <H_LED_Void_LedSetOn>
				H_SSD_Void_SSDWriteNumber(Set_Temprature);
    249a:	80 91 82 01 	lds	r24, 0x0182
    249e:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <H_SSD_Void_SSDWriteNumber>
    24a2:	10 c0       	rjmp	.+32     	; 0x24c4 <main+0x124>
			} else {
				H_SSD_Void_SSDWriteNumber(MINIMUM_TEMPRATURE);
    24a4:	83 e2       	ldi	r24, 0x23	; 35
    24a6:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <H_SSD_Void_SSDWriteNumber>
				//FLAG ON WHEN SET TEMP OUT OF RANGE[MIN-MAX]
				H_LED_Void_LedSetOn(LED3);
    24aa:	83 e0       	ldi	r24, 0x03	; 3
    24ac:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <H_LED_Void_LedSetOn>
    24b0:	98 01       	movw	r18, r16
    24b2:	ce 01       	movw	r24, r28
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	f1 f7       	brne	.-4      	; 0x24b4 <main+0x114>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b8:	21 50       	subi	r18, 0x01	; 1
    24ba:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24bc:	d1 f7       	brne	.-12     	; 0x24b2 <main+0x112>
				_delay_ms(2000);
				H_LED_Void_LedSetOff(LED3);
    24be:	83 e0       	ldi	r24, 0x03	; 3
    24c0:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <H_LED_Void_LedSetOff>
			}
			Down_Button_Pressed = False;
    24c4:	10 92 81 01 	sts	0x0181, r1
		}
		if (LM35_Reading == Set_Temprature) {
    24c8:	90 91 7d 01 	lds	r25, 0x017D
    24cc:	80 91 82 01 	lds	r24, 0x0182
    24d0:	98 17       	cp	r25, r24
    24d2:	09 f0       	breq	.+2      	; 0x24d6 <main+0x136>
    24d4:	ae cf       	rjmp	.-164    	; 0x2432 <main+0x92>
			H_Fan_Void_FanSetOff();
    24d6:	0e 94 ee 10 	call	0x21dc	; 0x21dc <H_Fan_Void_FanSetOff>
			//TURN OFF HEATER/COOLER FLAG
			H_LED_Void_LedSetOff(LED1);
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <H_LED_Void_LedSetOff>
			H_HeatingElement_Void_HeatingElementStop();
    24e0:	0e 94 db 10 	call	0x21b6	; 0x21b6 <H_HeatingElement_Void_HeatingElementStop>
    24e4:	a6 cf       	rjmp	.-180    	; 0x2432 <main+0x92>

000024e6 <__mulsi3>:
    24e6:	62 9f       	mul	r22, r18
    24e8:	d0 01       	movw	r26, r0
    24ea:	73 9f       	mul	r23, r19
    24ec:	f0 01       	movw	r30, r0
    24ee:	82 9f       	mul	r24, r18
    24f0:	e0 0d       	add	r30, r0
    24f2:	f1 1d       	adc	r31, r1
    24f4:	64 9f       	mul	r22, r20
    24f6:	e0 0d       	add	r30, r0
    24f8:	f1 1d       	adc	r31, r1
    24fa:	92 9f       	mul	r25, r18
    24fc:	f0 0d       	add	r31, r0
    24fe:	83 9f       	mul	r24, r19
    2500:	f0 0d       	add	r31, r0
    2502:	74 9f       	mul	r23, r20
    2504:	f0 0d       	add	r31, r0
    2506:	65 9f       	mul	r22, r21
    2508:	f0 0d       	add	r31, r0
    250a:	99 27       	eor	r25, r25
    250c:	72 9f       	mul	r23, r18
    250e:	b0 0d       	add	r27, r0
    2510:	e1 1d       	adc	r30, r1
    2512:	f9 1f       	adc	r31, r25
    2514:	63 9f       	mul	r22, r19
    2516:	b0 0d       	add	r27, r0
    2518:	e1 1d       	adc	r30, r1
    251a:	f9 1f       	adc	r31, r25
    251c:	bd 01       	movw	r22, r26
    251e:	cf 01       	movw	r24, r30
    2520:	11 24       	eor	r1, r1
    2522:	08 95       	ret

00002524 <__udivmodqi4>:
    2524:	99 1b       	sub	r25, r25
    2526:	79 e0       	ldi	r23, 0x09	; 9
    2528:	04 c0       	rjmp	.+8      	; 0x2532 <__udivmodqi4_ep>

0000252a <__udivmodqi4_loop>:
    252a:	99 1f       	adc	r25, r25
    252c:	96 17       	cp	r25, r22
    252e:	08 f0       	brcs	.+2      	; 0x2532 <__udivmodqi4_ep>
    2530:	96 1b       	sub	r25, r22

00002532 <__udivmodqi4_ep>:
    2532:	88 1f       	adc	r24, r24
    2534:	7a 95       	dec	r23
    2536:	c9 f7       	brne	.-14     	; 0x252a <__udivmodqi4_loop>
    2538:	80 95       	com	r24
    253a:	08 95       	ret

0000253c <__udivmodsi4>:
    253c:	a1 e2       	ldi	r26, 0x21	; 33
    253e:	1a 2e       	mov	r1, r26
    2540:	aa 1b       	sub	r26, r26
    2542:	bb 1b       	sub	r27, r27
    2544:	fd 01       	movw	r30, r26
    2546:	0d c0       	rjmp	.+26     	; 0x2562 <__udivmodsi4_ep>

00002548 <__udivmodsi4_loop>:
    2548:	aa 1f       	adc	r26, r26
    254a:	bb 1f       	adc	r27, r27
    254c:	ee 1f       	adc	r30, r30
    254e:	ff 1f       	adc	r31, r31
    2550:	a2 17       	cp	r26, r18
    2552:	b3 07       	cpc	r27, r19
    2554:	e4 07       	cpc	r30, r20
    2556:	f5 07       	cpc	r31, r21
    2558:	20 f0       	brcs	.+8      	; 0x2562 <__udivmodsi4_ep>
    255a:	a2 1b       	sub	r26, r18
    255c:	b3 0b       	sbc	r27, r19
    255e:	e4 0b       	sbc	r30, r20
    2560:	f5 0b       	sbc	r31, r21

00002562 <__udivmodsi4_ep>:
    2562:	66 1f       	adc	r22, r22
    2564:	77 1f       	adc	r23, r23
    2566:	88 1f       	adc	r24, r24
    2568:	99 1f       	adc	r25, r25
    256a:	1a 94       	dec	r1
    256c:	69 f7       	brne	.-38     	; 0x2548 <__udivmodsi4_loop>
    256e:	60 95       	com	r22
    2570:	70 95       	com	r23
    2572:	80 95       	com	r24
    2574:	90 95       	com	r25
    2576:	9b 01       	movw	r18, r22
    2578:	ac 01       	movw	r20, r24
    257a:	bd 01       	movw	r22, r26
    257c:	cf 01       	movw	r24, r30
    257e:	08 95       	ret

00002580 <__divmodsi4>:
    2580:	97 fb       	bst	r25, 7
    2582:	09 2e       	mov	r0, r25
    2584:	05 26       	eor	r0, r21
    2586:	0e d0       	rcall	.+28     	; 0x25a4 <__divmodsi4_neg1>
    2588:	57 fd       	sbrc	r21, 7
    258a:	04 d0       	rcall	.+8      	; 0x2594 <__divmodsi4_neg2>
    258c:	d7 df       	rcall	.-82     	; 0x253c <__udivmodsi4>
    258e:	0a d0       	rcall	.+20     	; 0x25a4 <__divmodsi4_neg1>
    2590:	00 1c       	adc	r0, r0
    2592:	38 f4       	brcc	.+14     	; 0x25a2 <__divmodsi4_exit>

00002594 <__divmodsi4_neg2>:
    2594:	50 95       	com	r21
    2596:	40 95       	com	r20
    2598:	30 95       	com	r19
    259a:	21 95       	neg	r18
    259c:	3f 4f       	sbci	r19, 0xFF	; 255
    259e:	4f 4f       	sbci	r20, 0xFF	; 255
    25a0:	5f 4f       	sbci	r21, 0xFF	; 255

000025a2 <__divmodsi4_exit>:
    25a2:	08 95       	ret

000025a4 <__divmodsi4_neg1>:
    25a4:	f6 f7       	brtc	.-4      	; 0x25a2 <__divmodsi4_exit>
    25a6:	90 95       	com	r25
    25a8:	80 95       	com	r24
    25aa:	70 95       	com	r23
    25ac:	61 95       	neg	r22
    25ae:	7f 4f       	sbci	r23, 0xFF	; 255
    25b0:	8f 4f       	sbci	r24, 0xFF	; 255
    25b2:	9f 4f       	sbci	r25, 0xFF	; 255
    25b4:	08 95       	ret

000025b6 <__prologue_saves__>:
    25b6:	2f 92       	push	r2
    25b8:	3f 92       	push	r3
    25ba:	4f 92       	push	r4
    25bc:	5f 92       	push	r5
    25be:	6f 92       	push	r6
    25c0:	7f 92       	push	r7
    25c2:	8f 92       	push	r8
    25c4:	9f 92       	push	r9
    25c6:	af 92       	push	r10
    25c8:	bf 92       	push	r11
    25ca:	cf 92       	push	r12
    25cc:	df 92       	push	r13
    25ce:	ef 92       	push	r14
    25d0:	ff 92       	push	r15
    25d2:	0f 93       	push	r16
    25d4:	1f 93       	push	r17
    25d6:	cf 93       	push	r28
    25d8:	df 93       	push	r29
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
    25de:	ca 1b       	sub	r28, r26
    25e0:	db 0b       	sbc	r29, r27
    25e2:	0f b6       	in	r0, 0x3f	; 63
    25e4:	f8 94       	cli
    25e6:	de bf       	out	0x3e, r29	; 62
    25e8:	0f be       	out	0x3f, r0	; 63
    25ea:	cd bf       	out	0x3d, r28	; 61
    25ec:	09 94       	ijmp

000025ee <__epilogue_restores__>:
    25ee:	2a 88       	ldd	r2, Y+18	; 0x12
    25f0:	39 88       	ldd	r3, Y+17	; 0x11
    25f2:	48 88       	ldd	r4, Y+16	; 0x10
    25f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    25f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    25f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    25fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    25fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    25fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    2600:	b9 84       	ldd	r11, Y+9	; 0x09
    2602:	c8 84       	ldd	r12, Y+8	; 0x08
    2604:	df 80       	ldd	r13, Y+7	; 0x07
    2606:	ee 80       	ldd	r14, Y+6	; 0x06
    2608:	fd 80       	ldd	r15, Y+5	; 0x05
    260a:	0c 81       	ldd	r16, Y+4	; 0x04
    260c:	1b 81       	ldd	r17, Y+3	; 0x03
    260e:	aa 81       	ldd	r26, Y+2	; 0x02
    2610:	b9 81       	ldd	r27, Y+1	; 0x01
    2612:	ce 0f       	add	r28, r30
    2614:	d1 1d       	adc	r29, r1
    2616:	0f b6       	in	r0, 0x3f	; 63
    2618:	f8 94       	cli
    261a:	de bf       	out	0x3e, r29	; 62
    261c:	0f be       	out	0x3f, r0	; 63
    261e:	cd bf       	out	0x3d, r28	; 61
    2620:	ed 01       	movw	r28, r26
    2622:	08 95       	ret

00002624 <_exit>:
    2624:	f8 94       	cli

00002626 <__stop_program>:
    2626:	ff cf       	rjmp	.-2      	; 0x2626 <__stop_program>
